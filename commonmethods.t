[ ] //////////////////////////////////////////////////////////////////////[ ] // File: 		common methods.t									//[ ] // Author: 		John Connolly										//[ ] //////////////////////////////////////////////////////////////////////[ ] [ ] [+] CheckBox_Check    				(STRING sWindow, ANYTYPE aControl)	[+] //CheckBox_Check		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_Check		[ ] // Purpose:			This function will select a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "ctr1", "CheckBox_Check"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] // Check the specified checkBox		[+] do			[ ] 			[ ] // if the checkbox is NOT checked (returning FALSE) then check it; otherwise ignore			[+] if !( @sWindow.@aControl.IsChecked() )				[ ] 				[ ] @sWindow.@aControl.Check()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {sWindow}.{aControl}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_Check2    				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2)	[+] //CheckBox_Check2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_Check2		[ ] // Purpose:			This function will select a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "CheckBox_Check2"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] // Check the specified checkBox		[+] do			[ ] 			[ ] // if the checkbox is NOT checked (returning FALSE) then check it; otherwise ignore			[+] if !( @sWindow.@aControl1.@aControl2.IsChecked() )				[ ] 				[ ] @sWindow.@aControl1.@aControl2.Check()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {aControl2}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_Check3    				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3)	[+] //CheckBox_Check3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_Check3		[ ] // Purpose:			This function will select a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctrl3", "CheckBox_Check3"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] // Check the specified checkBox		[+] do			[ ] 			[ ] // if the checkbox is NOT checked (returning FALSE) then check it; otherwise ignore			[+] if !( @sWindow.@aControl1.@aControl2.@aControl3.IsChecked() )				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.Check()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {aControl3}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_Check4    				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4)	[+] //CheckBox_Check4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_Check4		[ ] // Purpose:			This function will select a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "CheckBox_Check4"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] // Check the specified checkBox		[+] do			[ ] 			[ ] // if the checkbox is NOT checked (returning FALSE) then check it; otherwise ignore			[+] if !( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsChecked() )				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.Check()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {aControl4}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_Check5    				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5)	[+] //CheckBox_Check5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_Check5		[ ] // Purpose:			This function will select a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "CheckBox_Check5"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsEnabled() )		[ ] 		[ ] // Check the specified checkBox		[+] do			[ ] 			[ ] // if the checkbox is NOT checked (returning FALSE) then check it; otherwise ignore			[+] if !( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsChecked() )				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Check()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {aControl5}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl5}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_Check6    				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6)	[+] //CheckBox_Select5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_Select		[ ] // Purpose:			This function will select a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "control", "CheckBox_Select"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled() )		[ ] 		[ ] // Check the specified checkBox		[+] do			[ ] 			[ ] // if the checkbox is NOT checked (returning FALSE) then check it; otherwise ignore			[+] if !( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsChecked() )				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.Check()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {aControl6}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_UnCheck    			(STRING sWindow, ANYTYPE aControl)	[+] //CheckBox_UnCheck		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_UnCheck		[ ] // Purpose:			This function will unselect a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "CheckBox_UnCheck", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] // Unselect the specified checkBox		[+] do			[ ] // if the checkbox is checked (returning TRUE) then uncheck it; otherwise ignore it			[+] if ( @sWindow.@aControl.IsChecked() )				[ ] 				[ ] @sWindow.@aControl.UnCheck()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {aControl}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_UnCheck3   			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3)	[+] //CheckBox_UnCheck3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_UnCheck3		[ ] // Purpose:			This function will unselect a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "CheckBox_UnCheck3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] // Unselect the specified checkBox		[+] do			[ ] 			[ ] // if the checkbox is checked (returning TRUE) then uncheck it; otherwise ignore it			[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsChecked() )				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.UnCheck()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {aControl3}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_UnCheck4   			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4)	[+] //CheckBox_UnCheck4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_UnCheck4		[ ] // Purpose:			This function will unselect a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "CheckBox_UnCheck4", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] // Unselect the specified checkBox		[+] do			[ ] 			[ ] // if the checkbox is checked (returning TRUE) then uncheck it; otherwise ignore it			[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsChecked() )				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.UnCheck()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {aControl4}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_UnCheck5   			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5)	[+] //CheckBox_UnCheck		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_UnCheck		[ ] // Purpose:			This function will unselect a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "CheckBox_UnCheck", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsEnabled() )		[ ] 		[ ] // Unselect the specified checkBox		[+] do			[ ] // if the checkbox is checked (returning TRUE) then uncheck it; otherwise ignore it			[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsChecked() )				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.UnCheck()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {aControl5}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl5}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_UnCheck6   			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6)	[+] //CheckBox_UnCheck		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_UnCheck		[ ] // Purpose:			This function will unselect a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "CheckBox_UnCheck", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled() )		[ ] 		[ ] // Unselect the specified checkBox		[+] do			[ ] // if the checkbox is checked (returning TRUE) then uncheck it; otherwise ignore it			[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsChecked() )				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.UnCheck()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {aControl6}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_UnCheck2    			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2)	[+] //CheckBox_UnCheck2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_UnCheck2		[ ] // Purpose:			This function will unselect a CheckBox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "CheckBox_UnCheck2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] // Unselect the specified checkBox		[+] do			[ ] 			[ ] // if the checkbox is checked (returning TRUE) then uncheck it; otherwise ignore it			[+] if ( @sWindow.@aControl1.@aControl2.IsChecked() )				[ ] 				[ ] @sWindow.@aControl1.@aControl2.UnCheck()				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't unselect the checkbox: {sWindow}.{aControl1}.{aControl2}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_Verify    				(STRING sWindow, ANYTYPE aControl,  ANYTYPE aState)	[+] //CheckBox_Verify		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_Verify		[ ] // Purpose:			This function will verify a CheckBox.		[ ] //		[ ] // Inputs:			STRING  (the name of the Window)		[ ] //					STRING  (the name of the Control)		[ ] //					ANYTYPE (the state of the checkbox)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "CheckBox_Verify", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] // Verifies that the chekcbox is checked.		[+] if ( @sWindow.@aControl.IsChecked() )			[ ] 			[+] if (aState[1] == "checked")				[ ] 				[ ] print ("The CheckBox is checked as expected.")				[ ] 			[+] else				[ ] 				[ ] NonFatalError ("The CheckBox: {aControl} is checked and it shouldn't be.")				[ ] 			[ ] 		[+] else			[ ] 			[ ] 			[+] if (aState[1] == "checked")				[ ] 				[ ] NonFatalError ("The CheckBox: {aControl} isn't checked as expected.")				[ ] 			[+] else				[ ] 				[ ] print ("The CheckBox is unchecked as expected.")		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_Verify2    			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aState)	[+] //CheckBox_Verify2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_Verify2		[ ] // Purpose:			This function will verify a CheckBox.		[ ] //		[ ] // Inputs:			STRING  (the name of the Window)		[ ] //					STRING  (the name of the Control)		[ ] //					ANYTYPE (the state of the checkbox)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctrl2", "CheckBox_Verify2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] // Verifies that the chekcbox is checked.		[+] if ( @sWindow.@aControl1.@aControl2.IsChecked() )			[ ] 			[+] if (aState[1] == "checked")				[ ] 				[ ] print ("The CheckBox is checked as expected.")				[ ] 			[+] else				[ ] 				[ ] NonFatalError ("The CheckBox: '{aControl2}' is checked and it shouldn't be.")				[ ] 			[ ] 		[+] else			[ ] 			[ ] 			[+] if (aState[1] == "checked")				[ ] 				[ ] NonFatalError ("The CheckBox: '{aControl2}' isn't checked as expected.")				[ ] 			[+] else				[ ] 				[ ] print ("The CheckBox is unchecked as expected.")		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_Verify3    			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aState)	[+] //CheckBox_Verify3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_Verify3		[ ] // Purpose:			This function will verify a CheckBox.		[ ] //		[ ] // Inputs:			STRING  (the name of the Window)		[ ] //					STRING  (the name of the Control)		[ ] //					ANYTYPE (the state of the checkbox)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctrl2", "ctrl3", "CheckBox_Verify3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] // Verifies that the chekcbox is checked.		[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsChecked() )			[ ] 			[+] if (aState[1] == "checked")				[ ] 				[ ] print ("The CheckBox is checked as expected.")				[ ] 			[+] else				[ ] 				[ ] NonFatalError ("The CheckBox: '{aControl3}' is checked and it shouldn't be.")				[ ] 			[ ] 		[+] else			[ ] 			[+] if (aState[1] == "checked")				[ ] 				[ ] NonFatalError ("The CheckBox: '{aControl3}' isn't checked as expected.")				[ ] 			[+] else				[ ] 				[ ] print ("The CheckBox is unchecked as expected.")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] CheckBox_Verify4    			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aState)	[+] //CheckBox_Verify4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	CheckBox_Verify4		[ ] // Purpose:			This function will verify a CheckBox.		[ ] //		[ ] // Inputs:			STRING  (the name of the Window)		[ ] //					STRING  (the name of the Control)		[ ] //					ANYTYPE (the state of the checkbox)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctrl2", "ctrl3", "ctrl4", "CheckBox_Verify4", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] // Verifies that the chekcbox is checked.		[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsChecked() )			[ ] 			[+] if (aState[1] == "checked")				[ ] 				[ ] print ("The CheckBox is checked as expected.")				[ ] 			[+] else				[ ] 				[ ] NonFatalError ("The CheckBox: '{aControl4}' is checked and it shouldn't be.")				[ ] 			[ ] 		[+] else			[ ] 			[+] if (aState[1] == "checked")				[ ] 				[ ] NonFatalError ("The CheckBox: '{aControl4}' isn't checked as expected.")				[ ] 			[+] else				[ ] 				[ ] print ("The CheckBox is unchecked as expected.")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] ListBox_Items_Print				(STRING sWindow, ANYTYPE aControl)	[+] //ListBox_Items_Print		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author: 			John Connolly		[ ] // Function Name:	ListBox_Items_Print		[ ] // Purpose: 		This function will loop through all items found in		[ ] //					control (eg. listbox) and print their string values.		[ ] //		[ ] // Inputs:			STRING (window name)		[ ] //					STRING (control name)		[ ] //		[ ] // Example:			testdata: "window", "control", "ListBox_Items_Print"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sTemp	[ ] LIST OF STRING lsGetList = @sWindow.@aControl.GetContents()	[ ] 	[ ] 	[ ] // Check that the GetContents() method does not return a list count of zero (empty)	[+] if ( ListCount(lsGetList) == 0 )		[ ] NonFatalError("Control list is empty; check testplan.")		[ ] 	[+] else		[ ] 		[ ] // Loop through each program group 		[+] for each sTemp in lsGetList			[ ] print("Items found are: '{sTemp}' ")			[ ] 	[ ] [ ] [+] ListBox_Items_Select  			(STRING sWindow, ANYTYPE aControl,  ANYTYPE aItems)	[+] //ListBox_Items_Select		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListBox_Items_Select		[ ] // Purpose:			This function will select one or more item(s) from a list box.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "ListBox_Items_Select", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sItems	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] 		[+] if ( TypeOf(aItems) == STRING )			[ ] 			[ ] // Check that the string is empty. If so, log an error to the results file.			[+] if ( aItems == "" )				[ ] 				[ ] FatalError("Parameter value passed is empty ")				[ ] 			[ ] 			[ ] 			[ ] @sWindow.@aControl.Select(aItems)			[ ] 			[ ] 		[+] else if ( TypeOf(aItems) == LIST OF STRING)			[ ] 			[ ] // Check that the list is empty. If so, log an error to the results file.			[+] if ( ListCount(aItems) == 0 )				[ ] FatalError("Parameter value passed is empty ")			[ ] 			[ ] 			[+] for each sItems in aItems				[ ] 				[ ] @sWindow.@aControl.Select(sItems)			[ ] 			[ ] 		[+] else 			[ ] 			[ ] FatalError("Could not select '{aItems}' from control {aControl}; check testplan. ")		[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] [ ] [+] ListBox_Items_Verify   			(STRING sWindow, ANYTYPE aControl,  ANYTYPE aItems)	[+] //ListBox_Items_Verify		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListBox_Items_Verify		[ ] // Purpose:			This function will verify one or more items from a list box.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "ListBox_Items_Verify", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] LIST OF STRING lsValueInWin = { "" }	[ ] STRING  sItems = "", aControl2 = ""	[ ] INTEGER iExpected = 0, iActual = 0, iFound = 0	[ ] BOOLEAN bError = TRUE	[ ] 	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] 		[ ] // Get the contents of the listbox.		[+] do			[ ] 			[ ] lsValueInWin = @sWindow.@aControl.GetContents()			[ ] 		[+] except			[ ] 			[ ] FatalError ("ERROR in GetContents")			[ ] 		[ ] 		[ ] // Get the list count of the listbox and the expected values.		[ ] iExpected = ListCount(aItems)		[ ] iActual   = ListCount(lsValueInWin)		[ ] 		[ ] 		[ ] // Compare the Expected value to the Actual.		[+] if (iExpected != iActual)			[ ] 			[ ] NonFatalError ("The Actual list count '{iActual}' and the Expected list count '{iExpected}' in '"+sWindow+"."+aControl+"' weren't equal.")			[ ] 		[+] else			[ ] 			[ ] 			[+] for each sItems in lsValueInWin				[ ] 				[ ] iFound = ListFind (aItems, sItems)				[ ] 				[+] if (iFound== 0)					[ ] 					[ ] bError = FALSE					[ ] NonFatalError ("Actual value: '"+sItems+"' was not found in the '{aControl}' list.")					[ ] 			[ ] 			[ ] 			[ ] // Prints out a line indicating that there were no errors.			[+] if (bError)				[ ] 				[ ] print("All items verified OK")				[ ] 		[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] 	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItems) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] 		[ ] STRING sItem = "*;"+aItems[1]		[ ] 		[ ] @sWindow.@aControl.Select(sItem)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] [ ] [+] ListView_Item_Select  			(STRING sWindow, ANYTYPE aControl,  ANYTYPE aItem)	[+] //ListView_Item_Select		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Item_Select		[ ] // Purpose:			This function will select one item from a listview control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "ListView_Item_Select", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItem) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] 		[ ] STRING sItem = "*;"+aItem[1]		[ ] 		[ ] @sWindow.@aControl.Select(sItem)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] [ ] [+] ListView_Item_Select2			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, LISTITEM aItem)	[+] //ListView_Item_Select2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Item_Select2		[ ] // Purpose:			This function will select one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ListView_Item_Select2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( aItem == NULL )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] @sWindow.@aControl1.@aControl2.Select(aItem)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] ListView_Item_Select3			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, LISTITEM aItem)	[+] //ListView_Item_Select3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Item_Select3		[ ] // Purpose:			This function will select one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ListView_Item_Select3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( aItem == NULL )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] @sWindow.@aControl1.@aControl2.@aControl3.Select(aItem)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] ListView_Item_Select4			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, LISTITEM aItem)	[+] //ListView_Item_Select3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Item_Select3		[ ] // Purpose:			This function will select one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ListView_Item_Select3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( aItem == NULL )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.Select(aItem)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] ListBox_Items_Select5  			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aItems)	[+] //ListBox_Items_Select5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListBox_Items_Select		[ ] // Purpose:			This function will select one or more item(s) from a list box.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "ListBox_Items_Select", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sItems	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsEnabled() )		[ ] 		[ ] 		[+] if ( TypeOf(aItems) == STRING )			[ ] 			[ ] // Check that the string is empty. If so, log an error to the results file.			[+] if ( aItems == "" )				[ ] 				[ ] FatalError("Parameter value passed is empty ")				[ ] 			[ ] 			[ ] 			[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Select(aItems)			[ ] 			[ ] 		[+] else if ( TypeOf(aItems) == LIST OF STRING)			[ ] 			[ ] // Check that the list is empty. If so, log an error to the results file.			[+] if ( ListCount(aItems) == 0 )				[ ] FatalError("Parameter value passed is empty ")			[ ] 			[ ] 			[+] for each sItems in aItems				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Select(sItems)			[ ] 			[ ] 		[+] else 			[ ] 			[ ] FatalError("Could not select '{aItems}' from control {aControl5}; check testplan. ")		[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl5}' isn't enabled.")		[ ] [ ] [+] ListBox_Items_Select6  			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, LISTITEM aControl4, ANYTYPE aControl5, ANYTYPE aControl6, ANYTYPE aItems)	[+] //ListBox_Items_Select6		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListBox_Items_Select		[ ] // Purpose:			This function will select one or more item(s) from a list box.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the first Control)		[ ] //					STRING (the name of the second Control)		[ ] //					STRING (the name of the third Control)		[ ] //					STRING (the name of the fourth Control)		[ ] //					STRING (the name of the fifth Control)		[ ] //					STRING (the name of the sixth Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "ListBox_Items_Select", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sItems	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled() )		[ ] 		[ ] 		[+] if ( TypeOf(aItems) == STRING )			[ ] 			[ ] // Check that the string is empty. If so, log an error to the results file.			[+] if ( aItems == "" )				[ ] 				[ ] FatalError("Parameter value passed is empty ")				[ ] 			[ ] 			[ ] 			[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.Select(aItems)			[ ] 			[ ] 		[+] else if ( TypeOf(aItems) == LIST OF STRING)			[ ] 			[ ] // Check that the list is empty. If so, log an error to the results file.			[+] if ( ListCount(aItems) == 0 )				[ ] FatalError("Parameter value passed is empty ")			[ ] 			[ ] 			[+] for each sItems in aItems				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.Select(sItems)			[ ] 			[ ] 		[+] else 			[ ] 			[ ] FatalError("Could not select '{aItems}' from control {aControl6}; check testplan. ")		[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")		[ ] [ ] [+] ListView_Item_DoubleSelect 		(STRING sWindow, ANYTYPE aControl,  LISTITEM aItem)	[+] //ListView_Item_DoubleSelect		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Item_DoubleSelect		[ ] // Purpose:			This function will double select one item from a listview control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "ListView_Item_DoubleSelect", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( aItem == NULL )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] 		[ ] STRING sItem = "*;"+aItem[1]		[ ] 		[ ] @sWindow.@aControl.DoubleSelect(sItem)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] [ ] [+] ListView_Item_DoubleSelect2		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, LISTITEM liItem)	[+] //ListView_Item_DoubleSelect2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Item_DoubleSelect2		[ ] // Purpose:			This function will double select one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control1", "control2", "ListView_Item_DoubleSelect2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( liItem == "" )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] @sWindow.@aControl1.@aControl2.DoubleSelect(liItem)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] ListView_Item_DoubleSelect3		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, LISTITEM liItem)	[+] //ListView_Item_DoubleSelect3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Item_DoubleSelect3		[ ] // Purpose:			This function will double select one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ListView_Item_DoubleSelect3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( liItem == "" )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] @sWindow.@aControl1.@aControl2.@aControl3.DoubleSelect(liItem)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}.{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] ListView_Item_DoubleSelect5		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, LISTITEM liItem)	[+] //ListView_Item_DoubleSelect5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Item_DoubleSelect5		[ ] // Purpose:			This function will double select one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ListView_Item_DoubleSelect5", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( liItem == "" )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.DoubleSelect(liItem)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl5}' isn't enabled.")		[ ] 	[ ] [ ] [+] ListView_Item_RightClick3		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, LIST OF ANYTYPE laItem)	[+] //ListView_Item_RightClick3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Item_RightClick3		[ ] // Purpose:			This function will right click on an item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ListView_Item_RightClick3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] LISTITEM liService = laItem[1]		[ ] STRING   sItem = laItem[2]		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( liService == NULL )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] // Select the item		[ ] @sWindow.@aControl1.@aControl2.@aControl3.Select (liService)		[ ] 		[ ] 		[ ] // Get the position of the cursor		[ ] POINT pCursor = Cursor.GetPosition ()		[ ] 		[ ] 		[ ] // right click over the selected item		[ ] @sWindow.@aControl1.@aControl2.@aControl3.PopupSelect (pCursor.x, pCursor.y - 225, sItem)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}.{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] ListView_Items_Verify  			(STRING sWindow, ANYTYPE aControl,  ANYTYPE aItems)	[+] //ListView_Items_Verify		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Item_Verify		[ ] // Purpose:			This function will Verify items from a listview control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "ListView_Items_Verify", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] BOOLEAN bError	[ ] INTEGER	iExpected, iActual, iFound	[ ] STRING  sItems	[ ] LIST OF STRING lsItems, lsValueInWin	[ ] 	[ ] 	[+] if ( TypeOf(aItems) == LIST OF STRING)		[ ] 		[ ] 		[ ] // Check that the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItems) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] 		[ ] 		[ ] // Get the contents of the listview.		[+] do			[ ] lsItems = @sWindow.@aControl.GetContents()		[+] except			[ ] FatalError ("ERROR in Getcontents")		[ ] 		[ ] 		[ ] 		[ ] // Check for the list is not empty. If so, log an error to the results file.		[+] if ( typeof(aItems) == LIST OF STRING && ListCount(aItems) == 0 )			[ ] 			[ ] NonFatalError("Parameter list is empty; check testplan.")			[ ] 		[+] else			[ ] 			[ ] 			[ ] iExpected = ListCount(aItems)			[ ] iActual   = ListCount(lsValueInWin)			[ ] 			[ ] 			[ ] // Compare the Expected value to the Actual.			[+] if (iExpected != iActual)				[ ] 				[ ] NonFatalError ("The Actual list and the Expected list in "+sWindow+"."+aControl+" weren't equal.")				[ ] 			[+] else				[ ] 				[ ] 				[+] for each sItems in lsValueInWin					[ ] iFound = ListFind (aItems, sItems)					[ ] 					[+] if (iFound== 0)						[ ] 						[ ] bError = FALSE						[ ] NonFatalError ("Actual value: '"+sItems+"' was not found in the Expected list.")				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] print("All items verified OK")		[ ] 		[ ] 		[ ] 	[+] else 		[ ] 		[ ] FatalError("Could not Verify '{aItems}' for control {aControl}; check testplan. ")	[ ] [ ] [+] ListView_Items_Verify3  		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aItems)	[+] //ListView_Items_Verify3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Items_Verify3		[ ] // Purpose:			This function will Verify items from a listview control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ListView_Items_Verify3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] BOOLEAN bError = TRUE	[ ] INTEGER	iExpected, iActual, iFound	[ ] STRING  sItems	[ ] LIST OF STRING lsItems, lsValueInWin	[ ] 	[+] if ( TypeOf(aItems) == LIST OF STRING)		[ ] 		[ ] // Check that the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItems) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] 		[ ] // Get the contents of the listview.		[+] do			[ ] 			[ ] lsItems = @sWindow.@aControl1.@aControl2.@aControl3.GetContents()			[ ] 		[+] except			[ ] 			[ ] FatalError ("ERROR in GetContents")			[ ] 		[ ] 		[ ] 		[ ] // Check for the list is not empty. If so, log an error to the results file.		[+] if ( typeof(aItems) == LIST OF STRING && ListCount(aItems) == 0 )			[ ] 			[ ] NonFatalError("Parameter list is empty; check testplan.")			[ ] 		[+] else			[ ] 			[ ] iExpected = ListCount(aItems)			[ ] iActual   = ListCount(lsItems)			[ ] 			[ ] // Compare the Expected value to the Actual.			[+] if (iExpected != iActual)				[ ] 				[ ] print ("iExpected: {iExpected}  and iActual: {iActual}")				[ ] NonFatalError ("The Actual list and the Expected list in "+sWindow+"."+aControl3+" weren't equal.")				[ ] 			[+] else				[ ] 				[+] for each sItems in lsItems					[ ] iFound = ListFind (aItems, sItems)					[ ] 					[+] if (iFound== 0)						[ ] 						[ ] bError = FALSE						[ ] NonFatalError ("Actual value: '"+sItems+"' was not found in the Expected list.")					[ ] 				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] 					[ ] print("All items verified OK")					[ ] 				[ ] 			[ ] 		[ ] 		[ ] 	[+] else 		[ ] 		[ ] FatalError("The passed-in items need to be in a LIST OF STRING or ANYTYPE format.")	[ ] [ ] [+] ListView_Items_Verify5  		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aItems)	[+] //ListView_Items_Verify5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Items_Verify5		[ ] // Purpose:			This function will Verify items from a listview control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ListView_Items_Verify5", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] BOOLEAN bError = TRUE	[ ] INTEGER	iExpected, iActual, iFound	[ ] STRING  sItems	[ ] LIST OF STRING lsItems, lsValueInWin	[ ] 	[+] if ( TypeOf(aItems) == LIST OF STRING)		[ ] 		[ ] // Check that the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItems) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] 		[ ] // Get the contents of the listview.		[+] do			[ ] 			[ ] lsItems = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.GetContents()			[ ] 		[+] except			[ ] 			[ ] FatalError ("ERROR in GetContents")			[ ] 		[ ] 		[ ] 		[ ] // Check for the list is not empty. If so, log an error to the results file.		[+] if ( typeof(aItems) == LIST OF STRING && ListCount(aItems) == 0 )			[ ] 			[ ] NonFatalError("Parameter list is empty; check testplan.")			[ ] 		[+] else			[ ] 			[ ] iExpected = ListCount(aItems)			[ ] iActual   = ListCount(lsItems)			[ ] 			[ ] // Compare the Expected value to the Actual.			[+] if (iExpected != iActual)				[ ] 				[ ] print ("iExpected: {iExpected}  and iActual: {iActual}")				[ ] NonFatalError ("The Actual list and the Expected list in "+sWindow+"."+aControl5+" weren't equal.")				[ ] 			[+] else				[ ] 				[+] for each sItems in lsItems					[ ] iFound = ListFind (aItems, sItems)					[ ] 					[+] if (iFound== 0)						[ ] 						[ ] bError = FALSE						[ ] NonFatalError ("Actual value: '"+sItems+"' was not found in the Expected list.")					[ ] 				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] 					[ ] print("All items verified OK")					[ ] 				[ ] 			[ ] 		[ ] 		[ ] 	[+] else 		[ ] 		[ ] FatalError("The passed-in items need to be in a LIST OF STRING or ANYTYPE format.")	[ ] [ ] [+] ListView_Items_Verify6  		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6, ANYTYPE aItems)	[+] //ListView_Items_Verify6		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	ListView_Items_Verify6		[ ] // Purpose:			This function will Verify items from a listview control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ctr6", "ListView_Items_Verify6", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] BOOLEAN bError = TRUE	[ ] INTEGER	iExpected, iActual, iFound	[ ] STRING  sItems	[ ] LIST OF STRING lsItems, lsValueInWin	[ ] 	[+] if ( TypeOf(aItems) == LIST OF STRING)		[ ] 		[ ] // Check that the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItems) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] 		[ ] // Get the contents of the listview.		[+] do			[ ] 			[ ] lsItems = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.GetContents()			[ ] 		[+] except			[ ] 			[ ] FatalError ("ERROR in GetContents")			[ ] 		[ ] 		[ ] 		[ ] // Check for the list is not empty. If so, log an error to the results file.		[+] if ( typeof(aItems) == LIST OF STRING && ListCount(aItems) == 0 )			[ ] 			[ ] NonFatalError("Parameter list is empty; check testplan.")			[ ] 		[+] else			[ ] 			[ ] iExpected = ListCount(aItems)			[ ] iActual   = ListCount(lsItems)			[ ] 			[ ] // Compare the Expected value to the Actual.			[+] if (iExpected != iActual)				[ ] 				[ ] print ("iExpected: {iExpected}  and iActual: {iActual}")				[ ] NonFatalError ("The Actual list and the Expected list in "+sWindow+"."+aControl6+" weren't equal.")				[ ] 			[+] else				[ ] 				[+] for each sItems in lsItems					[ ] iFound = ListFind (aItems, sItems)					[ ] 					[+] if (iFound== 0)						[ ] 						[ ] bError = FALSE						[ ] NonFatalError ("Actual value: '"+sItems+"' was not found in the Expected list.")					[ ] 				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] 					[ ] print("All items verified OK")					[ ] 				[ ] 			[ ] 		[ ] 		[ ] 	[+] else 		[ ] 		[ ] FatalError("The passed-in items need to be in a LIST OF STRING or ANYTYPE format.")	[ ] [ ] [+] MenuItem_Check    				(STRING sWindow, ANYTYPE aControl,  ANYTYPE aItem)	[+] //MenuItem_Check 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	MenuItem_Check		[ ] // Purpose:			This function will check a menus item.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE(a LIST OF STRING containing the menu and		[ ] //							menuitem to check.		[ ] //		[ ] //					$Color_Red = { "Color", "Red" }		[ ] // Example:			testdata: "window", "control", "MenuItem_Check", $Color_Red		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] STRING sSTRING1 = aItem[1], sSTRING2 = aItem[2]	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@sSTRING1.@sSTRING2.IsEnabled() )		[ ] 		[ ] 		[+] do			[ ] 			[ ] 			[ ] // if the checkbox is NOT checked (return FALSE) then check it; otherwise ignore			[+] if !( @sWindow.@sSTRING1.@sSTRING2.IsChecked() )				[ ] 				[ ] @sWindow.@sSTRING1.@sSTRING2.Pick()				[ ] 			[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the checkbox: {sWindow}.{sSTRING1}.{sSTRING2}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{sSTRING1}.{sSTRING2}' isn't enabled.")		[ ] 	[ ] [ ] [+] MenuItem_UnCheck    			(STRING sWindow, ANYTYPE aControl,  ANYTYPE aItem)	[+] //MenuItem_UnCheck 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	MenuItem_UnCheck		[ ] // Purpose:			This function will uncheck a menuitem.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE(a LIST OF STRING containing the menu and		[ ] //							menuitem to uncheck.		[ ] //		[ ] //					$Color_Red = { "Color", "Red" }		[ ] // Example:			testdata: "window", "control", "MenuItem_UnCheck", $Color_Red		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] STRING sSTRING1 = aItem[1], sSTRING2 = aItem[2]	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@sSTRING1.@sSTRING2.IsEnabled() )		[ ] 		[ ] 		[+] do			[ ] 			[ ] 			[ ] // if the checkbox is checked (returning TRUE) then uncheck it; otherwise ignore it			[+] if ( @sWindow.@sSTRING1.@sSTRING2.IsChecked() )				[ ] 				[ ] @sWindow.@sSTRING1.@sSTRING2.Pick()				[ ] 			[ ] 		[+] except			[ ] FatalError ("Couldn't select the checkbox: {sWindow}.{sSTRING1}.{sSTRING2}")		[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{sSTRING1}.{sSTRING2}' isn't enabled.")		[ ] 	[ ] [ ] [+] MenuItem_Select   				(STRING sWindow, ANYTYPE aControl,  ANYTYPE aItem)	[+] //MenuItem_Select		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	MenuItem_Select		[ ] // Purpose:			This function will select a menu item.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (not used)		[ ] //					STRING (the menu/Item to select or ("checked", "unchecked") )		[ ] //		[ ] // 					The following switch statement will have the logic to 		[ ] //					'Check' or "Uncheck' a menu item OR select a single menu item. 		[ ] //					The following possibilities are:		[ ] //		[ ] //					{ "" }										result: error		[ ] //  				{ "Help" }									result: error		[ ] //					{ "File", "New" }							result: select menu item "File/New"		[ ] //  				{ "Options", "ViewInactive", "checked" }	result: check the menu item "Options/View Inactive"		[ ] //  				{ "New", "Account", "View", "unchecked" }	result: uncheck the menu item "New/Account/View"		[ ] //					{ "Too", "Many", "Parameters", "", "" }		result: error		[ ] //		[ ] //					$Color_Red = { "File", "New" }		[ ] // Example:			testdata: "window", "control", "MenuItem_Select", $File_New		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[+] switch (ListCount(aItem))		[+] case 0, 1			[ ] 			[ ] NonFatalError("The input list must be two items or more.")			[ ] 		[+] case 2			[ ] 			[ ] @sWindow.@(aItem[1]).@(aItem[2]).Pick()			[ ] 		[+] case 3			[ ] 			[ ] STRING sActionFlag = aItem[3]			[ ] 			[+] if ( sActionFlag == "checked" )				[ ] 				[ ] 				[+] if ( @sWindow.@(aItem[1]).@(aItem[2]).IsChecked() )					[ ] 					[ ] // do nothing					[ ] 				[+] else if !( @sWindow.@(aItem[1]).@(aItem[2]).IsChecked() )					[ ] 					[ ] // check it or select the menu item					[ ] @sWindow.@(aItem[1]).@(aItem[2]).Pick()					[ ] 				[ ] 				[ ] 			[+] else if ( sActionFlag == "unchecked" )				[ ] 				[+] if ( @sWindow.@(aItem[1]).@(aItem[2]).IsChecked() )					[ ] 					[ ] // select the menu item					[ ] @sWindow.@(aItem[1]).@(aItem[2]).Pick()					[ ] 				[+] else if !( @sWindow.@(aItem[1]).@(aItem[2]).IsChecked() )					[ ] 					[ ] // do nothing					[ ] 				[ ] 				[ ] 			[+] else				[ ] 				[ ] @sWindow.@(aItem[1]).@(aItem[2]).@(aItem[3]).Pick()				[ ] 			[ ] 		[+] case 4			[ ] 			[ ] sActionFlag = aItem[4]			[ ] 			[+] if ( sActionFlag == "checked" )				[ ] 				[ ] 				[+] if ( @sWindow.@(aItem[1]).@(aItem[2]).@(aItem[3]).IsChecked() )					[ ] 					[ ] // do nothing					[ ] 				[+] else if !( @sWindow.@(aItem[1]).@(aItem[2]).@(aItem[3]).IsChecked() )					[ ] 					[ ] // check it or select the menu item					[ ] @sWindow.@(aItem[1]).@(aItem[2]).@(aItem[3]).Pick()					[ ] 				[ ] 				[ ] 			[+] else if ( sActionFlag == "unchecked" )				[ ] 				[+] if ( @sWindow.@(aItem[1]).@(aItem[2]).@(aItem[3]).IsChecked() )					[ ] 					[ ] // select the menu item					[ ] @sWindow.@(aItem[1]).@(aItem[2]).@(aItem[3]).Pick()					[ ] 				[+] else if !( @sWindow.@(aItem[1]).@(aItem[2]).@(aItem[3]).IsChecked() )					[ ] 					[ ] // do nothing					[ ] 				[ ] 				[ ] 			[+] else				[ ] 				[ ] @sWindow.@(aItem[1]).@(aItem[2]).@(aItem[3]).@(aItem[4]).Pick()				[ ] 			[ ] 		[+] default			[ ] 			[ ] FatalError("Unable to select menu item from input list; check test plan.")			[ ] 	[ ] [ ] [+] PopUpList_Item_Select  			(STRING sWindow, ANYTYPE aControl,  ANYTYPE aItem)	[+] //PopUpList_Item_Select 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Item_Select 		[ ] // Purpose:			This function will select a value from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "PopUpList_Item_Select", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] @sWindow.@aControl.Select(aItem[1])		[ ] 	[+] else		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")[ ] [+] PopUpList_Item_Select2 			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aItem)	[+] //PopUpList_Item_Select2 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Item_Select2 		[ ] // Purpose:			This function will select a value from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "PopUpList_Item_Select2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] @sWindow.@aControl1.@aControl2.Select(aItem[1])		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Item_Select3 			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aItem)	[+] //PopUpList_Item_Select3 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Item_Select3 		[ ] // Purpose:			This function will select a value from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctrl3", "PopUpList_Item_Select3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] @sWindow.@aControl1.@aControl2.@aControl3.Select(aItem[1])		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}.{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Item_Select4  		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4,  ANYTYPE aItem)	[+] //PopUpList_Item_Select4 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Item_Select 		[ ] // Purpose:			This function will select a value from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the first Control)		[ ] //					STRING (the name of the second Control)		[ ] //					STRING (the name of the third Control)		[ ] //					STRING (the name of the fourth Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "PopUpList_Item_Select", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.Select(aItem[1])		[ ] 	[+] else		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")	[ ] [ ] [+] PopUpList_Item_Select5  		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5,  ANYTYPE aItem) 	[+] //PopUpList_Item_Select5 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Item_Select 		[ ] // Purpose:			This function will select a value from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the first Control)		[ ] //					STRING (the name of the second Control)		[ ] //					STRING (the name of the third Control)		[ ] //					STRING (the name of the fourth Control)		[ ] //					STRING (the name of the fifth Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "PopUpList_Item_Select", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsEnabled() )		[ ] 		[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Select(aItem[1])		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl5}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Item_Select6  		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5,  ANYTYPE aControl6,  ANYTYPE aItem) 	[+] //PopUpList_Item_Select6 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Item_Select6 		[ ] // Purpose:			This function will select a value from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the first Control)		[ ] //					STRING (the name of the second Control)		[ ] //					STRING (the name of the third Control)		[ ] //					STRING (the name of the fourth Control)		[ ] //					STRING (the name of the fifth Control)		[ ] //					STRING (the name of the sixth Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ctr6", "PopUpList_Item_Select6", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled() )		[ ] 		[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.Select(aItem[1])		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Items_Verify  		(STRING sWindow, ANYTYPE aControl,  ANYTYPE aItems)	[+] //PopUpList_Items_Verify		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_Verify		[ ] // Purpose:			This function will verify one or more values from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "PopUpList_Items_Verify", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] LIST OF ANYTYPE lsValueInWin	[ ] STRING  sValue	[ ] INTEGER iExpected, iActual, iFound	[ ] BOOLEAN bError = TRUE	[ ] 	[ ] // Verify that the control is enabled.	[+] // DEBUG:if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] 		[ ] // Grab the contents of the PopUp Listbox and the passed in Expected values.		[ ] lsValueInWin = @sWindow.@aControl.GetContents()		[ ] 		[ ] 		[ ] iExpected = ListCount(aItems)		[ ] iActual   = ListCount (lsValueInWin)		[ ] 		[ ] 		[ ] // Check that the list is not empty. If so, print a message to the results file.		[+] if ( typeof(aItems) == LIST OF STRING && ListCount(aItems) == 0 )			[ ] 			[ ] 			[ ] // Compare the Expected list count to the Actual list count.			[+] if (iExpected != iActual)				[ ] 				[ ] NonFatalError("Expected: "+ str(iExpected) +" for a list count but got an Actual of: "+ str(iActual) + " for a list count")				[ ] 			[+] else				[ ] 				[+] for each sValue in lsValueInWin					[ ] iFound = ListFind (aItems, sValue)					[ ] 					[+] if (iFound == 0)						[ ] bError = FALSE						[ ] NonFatalError("Actual value: '"+sValue+"' wasn't found in the Expected list")				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] print("All items verified OK")			[ ] 			[ ] 		[+] else			[ ] 			[ ] // Compare the Expected list count to the Actual list count.			[+] if (iExpected != iActual)				[ ] 				[ ] NonFatalError("Expected: "+ str(iExpected) +" for a list count but got an Actual of: "+ str(iActual) + " for a list count")				[ ] 				[ ] 				[+] for each sValue in lsValueInWin					[ ] print (sValue)				[ ] 				[ ] 			[+] else				[ ] 				[+] for each sValue in lsValueInWin					[ ] iFound = ListFind (aItems, sValue)					[ ] 					[+] if (iFound == 0)						[ ] bError = FALSE						[ ] NonFatalError("Actual value: '"+sValue+"' wasn't found in the Expected list")				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] print("All items verified OK")			[ ] 			[ ] [ ] [+] PopUpList_Items_Verify2  		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aItems)	[+] //PopUpList_Items_Verify2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_Verify2		[ ] // Purpose:			This function will verify one or more values from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "PopUpList_Items_Verify2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] LIST OF ANYTYPE lsValueInWin	[ ] STRING  sValue	[ ] INTEGER iExpected, iActual, iFound	[ ] BOOLEAN bError = TRUE	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] // Grab the contents of the PopUp Listbox and the passed in Expected values.		[ ] lsValueInWin = @sWindow.@aControl1.@aControl2.GetContents()		[ ] 		[ ] iExpected = ListCount(aItems)		[ ] iActual   = ListCount (lsValueInWin)		[ ] 		[ ] 		[ ] // Check that the list is not empty. If so, print a message to the results file.		[+] if ( typeof(aItems) == LIST OF STRING && ListCount(aItems) == 0 )			[ ] 			[ ] // Compare the Expected list count to the Actual list count.			[+] if (iExpected != iActual)				[ ] 				[ ] NonFatalError("Expected: "+ str(iExpected) +" for a list count but got an Actual of: "+ str(iActual) + " for a list count")				[ ] 			[+] else				[ ] 				[+] for each sValue in lsValueInWin					[ ] iFound = ListFind (aItems, sValue)					[ ] 					[+] if (iFound == 0)						[ ] bError = FALSE						[ ] NonFatalError("Actual value: '"+sValue+"' wasn't found in the Expected list")				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] print("All items verified OK")			[ ] 			[ ] 		[+] else			[ ] 			[ ] // Compare the Expected list count to the Actual list count.			[+] if (iExpected != iActual)				[ ] 				[ ] NonFatalError("Expected: "+ str(iExpected) +" for a list count but got an Actual of: "+ str(iActual) + " for a list count")				[ ] 				[ ] 				[+] for each sValue in lsValueInWin					[ ] print (sValue)				[ ] 				[ ] 			[+] else				[ ] 				[+] for each sValue in lsValueInWin					[ ] iFound = ListFind (aItems, sValue)					[ ] 					[+] if (iFound == 0)						[ ] bError = FALSE						[ ] NonFatalError("Actual value: '"+sValue+"' wasn't found in the Expected list")				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] print("All items verified OK")			[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] FatalError ("The control: '{@aControl1}.{@aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Items_Verify3  		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aItems)	[+] //PopUpList_Items_Verify3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_Verify3		[ ] // Purpose:			This function will verify one or more values from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "PopUpList_Items_Verify3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] LIST OF ANYTYPE lsValueInWin	[ ] STRING  sValue	[ ] INTEGER iExpected, iActual, iFound	[ ] BOOLEAN bError = TRUE	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] 		[ ] // Grab the contents of the PopUp Listbox and the passed in Expected values.		[ ] lsValueInWin = @sWindow.@aControl1.@aControl2.@aControl3.GetContents()		[ ] 		[ ] 		[ ] iExpected = ListCount(aItems)		[ ] iActual   = ListCount (lsValueInWin)		[ ] 		[ ] 		[ ] // Check that the list is not empty. If so, print a message to the results file.		[+] if ( typeof(aItems) == LIST OF STRING && ListCount(aItems) == 0 )			[ ] 			[ ] 			[ ] // Compare the Expected list count to the Actual list count.			[+] if (iExpected != iActual)				[ ] 				[ ] NonFatalError("Expected: "+ str(iExpected) +" for a list count but got an Actual of: "+ str(iActual) + " for a list count")				[ ] 			[+] else				[ ] 				[+] for each sValue in lsValueInWin					[ ] iFound = ListFind (aItems, sValue)					[ ] 					[+] if (iFound == 0)						[ ] 						[ ] bError = FALSE						[ ] NonFatalError("Actual value: '"+sValue+"' wasn't found in the Expected list")						[ ] 				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] 					[ ] print("All items verified OK")					[ ] 				[ ] 			[ ] 			[ ] 		[+] else			[ ] 			[ ] // Compare the Expected list count to the Actual list count.			[+] if (iExpected != iActual)				[ ] 				[ ] NonFatalError("Expected: "+ str(iExpected) +" for a list count but got an Actual of: "+ str(iActual) + " for a list count")				[ ] 				[ ] 				[+] for each sValue in lsValueInWin					[ ] 					[ ] print (sValue)					[ ] 				[ ] 				[ ] 			[+] else				[ ] 				[+] for each sValue in lsValueInWin					[ ] iFound = ListFind (aItems, sValue)					[ ] 					[+] if (iFound == 0)						[ ] 						[ ] bError = FALSE						[ ] NonFatalError("Actual value: '"+sValue+"' wasn't found in the Expected list")						[ ] 				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] 					[ ] print("All items verified OK")					[ ] 				[ ] 			[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] FatalError ("The control: {@aControl1}.{@aControl2}.{@aControl3} isn't enabled")		[ ] 	[ ] [ ] [+] PopUpList_Items_Verify4  		(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aItems)	[+] //PopUpList_Items_Verify4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_Verify4		[ ] // Purpose:			This function will verify one or more values from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "PopUpList_Items_Verify4", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] LIST OF ANYTYPE lsValueInWin	[ ] STRING  sValue	[ ] INTEGER iExpected, iActual, iFound	[ ] BOOLEAN bError = TRUE	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] 		[ ] // Grab the contents of the PopUp Listbox and the passed in Expected values.		[ ] lsValueInWin = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.GetContents()		[ ] 		[ ] 		[ ] iExpected = ListCount(aItems)		[ ] iActual   = ListCount (lsValueInWin)		[ ] 		[ ] 		[ ] // Check that the list is not empty. If so, print a message to the results file.		[+] if ( typeof(aItems) == LIST OF STRING && ListCount(aItems) == 0 )			[ ] 			[ ] 			[ ] // Compare the Expected list count to the Actual list count.			[+] if (iExpected != iActual)				[ ] 				[ ] NonFatalError("Expected: "+ str(iExpected) +" for a list count but got an Actual of: "+ str(iActual) + " for a list count")				[ ] 			[+] else				[ ] 				[+] for each sValue in lsValueInWin					[ ] iFound = ListFind (aItems, sValue)					[ ] 					[+] if (iFound == 0)						[ ] 						[ ] bError = FALSE						[ ] NonFatalError("Actual value: '"+sValue+"' wasn't found in the Expected list")						[ ] 					[ ] 				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] 					[ ] print("All items verified OK")					[ ] 				[ ] 			[ ] 			[ ] 		[+] else			[ ] 			[ ] // Compare the Expected list count to the Actual list count.			[+] if (iExpected != iActual)				[ ] 				[ ] NonFatalError("Expected: "+ str(iExpected) +" for a list count but got an Actual of: "+ str(iActual) + " for a list count")				[ ] 				[ ] 				[+] for each sValue in lsValueInWin					[ ] 					[ ] print (sValue)					[ ] 				[ ] 				[ ] 			[+] else				[ ] 				[+] for each sValue in lsValueInWin					[ ] iFound = ListFind (aItems, sValue)					[ ] 					[+] if (iFound == 0)						[ ] 						[ ] bError = FALSE						[ ] NonFatalError("Actual value: '"+sValue+"' wasn't found in the Expected list")						[ ] 				[ ] 				[ ] 				[ ] // Prints out a line indicating that there were no errors.				[+] if (bError)					[ ] 					[ ] print("All items verified OK")					[ ] 				[ ] 			[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] FatalError ("The control: '{@aControl1}.{@aControl2}.{@aControl3}.{@aControl4}' isn't enabled")		[ ] 	[ ] [ ] [+] PopUpList_Items_Verify_Value  	(STRING sWindow, ANYTYPE aControl,  ANYTYPE aItems)	[+] //PopUpList_Items_Verify_Value		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_Verify_Value		[ ] // Purpose:			This function will verify that the items passed in exist		[ ] //					within the listbox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to verify from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "PopUpList_Items_Verify_Value", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] STRING  sValue		[ ] LIST OF STRING lsContents = @sWindow.@aControl.GetContents()		[ ] 		[ ] 		[ ] // Check for the list is not empty. If so, log an error to the results file.		[+] if ( typeof(aItems) == LIST OF ANYTYPE && ListCount(aItems) == 0 )			[ ] 			[ ] NonFatalError("Parameter list is empty; check testplan.")			[ ] 		[ ] 		[ ] 		[ ] // Verify that each value in our expected list is in the actual listbox.		[+] for each sValue in aItems			[ ] 			[ ] 			[+] if ( ListFind (lsContents, sValue) == 0)				[ ] 				[ ] NonFatalError ("{sValue} wasn't found in the Popup listbox.")				[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")	[ ] [ ] [+] PopUpList_Items_Verify_Value2  	(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aItems)	[+] //PopUpList_Items_Verify_Value2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_Verify_Value2		[ ] // Purpose:			This function will verify that the items passed in exist		[ ] //					within the listbox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to verify from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "PopUpList_Items_Verify_Value2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] STRING  sValue		[ ] LIST OF STRING lsContents = @sWindow.@aControl1.@aControl2.GetContents()		[ ] 		[ ] // Check for the list is not empty. If so, log an error to the results file.		[+] if ( typeof(aItems) == LIST OF ANYTYPE && ListCount(aItems) == 0 )			[ ] 			[ ] NonFatalError("Parameter list is empty; check testplan.")			[ ] 		[ ] 		[ ] 		[ ] // Verify that each value in our expected list is in the actual listbox.		[+] for each sValue in aItems			[ ] 			[+] if ( ListFind (lsContents, sValue) == 0)				[ ] 				[ ] NonFatalError ("{sValue} wasn't found in the Popup listbox.")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Items_Verify_Value3  	(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aItems)	[+] //PopUpList_Items_Verify_Value3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_Verify_Value3		[ ] // Purpose:			This function will verify that the items passed in exist		[ ] //					within the listbox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to verify from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "PopUpList_Items_Verify_Value3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] STRING  sValue		[ ] LIST OF STRING lsContents = @sWindow.@aControl1.@aControl2.@aControl3.GetContents()		[ ] 		[ ] // Check for the list is not empty. If so, log an error to the results file.		[+] if ( typeof(aItems) == LIST OF ANYTYPE && ListCount(aItems) == 0 )			[ ] 			[ ] NonFatalError("Parameter list is empty; check testplan.")			[ ] 		[ ] 		[ ] 		[ ] // Verify that each value in our expected list is in the actual listbox.		[+] for each sValue in aItems			[ ] 			[ ] 			[+] if ( ListFind (lsContents, sValue) == 0)				[ ] 				[ ] NonFatalError ("{sValue} wasn't found in the Popup listbox.")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Items_Verify_Value4  	(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aItems)	[+] //PopUpList_Items_Verify_Value4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_Verify_Value4		[ ] // Purpose:			This function will verify that the items passed in exist		[ ] //					within the listbox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to verify from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "PopUpList_Items_Verify_Value4", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] STRING  sValue		[ ] LIST OF STRING lsContents = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.GetContents()		[ ] 		[ ] // Check for the list is not empty. If so, log an error to the results file.		[+] if ( typeof(aItems) == LIST OF ANYTYPE && ListCount(aItems) == 0 )			[ ] 			[ ] NonFatalError("Parameter list is empty; check testplan.")			[ ] 		[ ] 		[ ] // Verify that each value in our expected list is in the actual listbox.		[+] for each sValue in aItems			[ ] 			[+] if ( ListFind (lsContents, sValue) == 0)				[ ] 				[ ] NonFatalError ("{sValue} wasn't found in the Popup listbox.")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Items_Verify_Value6  	(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6, ANYTYPE aItems)	[+] //PopUpList_Items_Verify_Value6		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_Verify_Value6		[ ] // Purpose:			This function will verify that the items passed in exist		[ ] //					within the listbox.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to verify from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ctr6", "PopUpList_Items_Verify_Value6", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled() )		[ ] 		[ ] STRING  sValue		[ ] LIST OF STRING lsContents = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.GetContents()		[ ] 		[ ] // Check for the list is not empty. If so, log an error to the results file.		[+] if ( typeof(aItems) == LIST OF ANYTYPE && ListCount(aItems) == 0 )			[ ] 			[ ] NonFatalError("Parameter list is empty; check testplan.")			[ ] 		[ ] 		[ ] // Verify that each value in our expected list is in the actual listbox.		[+] for each sValue in aItems			[ ] 			[+] if ( ListFind (lsContents, sValue) == 0)				[ ] 				[ ] NonFatalError ("{sValue} wasn't found in the Popup listbox.")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Items_View  			(STRING sWindow, ANYTYPE aControl,  ANYTYPE aExpected)	[+] //PopUpList_Items_View		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_View		[ ] // Purpose:			This function will report the curently selected item from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "PopUpList_Items_View", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sExpected, sActual	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] // Grab the item in the PopUp Listbox		[ ] sActual = @sWindow.@aControl.GetSelText ()		[ ] sExpected = aExpected[1]		[ ] 		[+] if (sExpected == sActual)			[ ] 			[ ] print("Item '{sActual}' verified OK")			[ ] 		[+] else			[ ] 			[ ] NonFatalError ("The Expected value '{sExpected} doesn't match the Actual value '{sActual}'")			[ ] 		[ ] 		[ ] 	[+] else		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")	[ ] [ ] [+] PopUpList_Items_View2  			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aExpected)	[+] //PopUpList_Items_View2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_View2		[ ] // Purpose:			This function will report the curently selected item from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "PopUpList_Items_View2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sExpected, sActual	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] 		[ ] // Grab the item in the PopUp Listbox		[ ] sActual = @sWindow.@aControl1.@aControl2.GetSelText ()		[ ] sExpected = aExpected[1]		[ ] 		[ ] 		[+] if (sExpected == sActual)			[ ] 			[ ] print("Item '{sActual}' verified OK")			[ ] 		[+] else			[ ] 			[ ] NonFatalError ("The Expected value '{sExpected}' doesn't match the Actual value '{sActual}'")			[ ] 		[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl2}' isn't enabled.")		[ ] 	[ ] 	[ ] [ ] [+] PopUpList_Items_View3  			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aExpected)	[+] //PopUpList_Items_View3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_View3		[ ] // Purpose:			This function will report the curently selected item from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "PopUpList_Items_View3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sExpected, sActual	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] // Grab the item in the PopUp Listbox		[ ] sActual = @sWindow.@aControl1.@aControl2.@aControl3.GetSelText ()		[ ] sExpected = aExpected[1]		[ ] 		[+] if (sExpected == sActual)			[ ] 			[ ] print("Item '{sActual}' verified OK")			[ ] 		[+] else			[ ] 			[ ] NonFatalError ("The Expected value '{sExpected}' doesn't match the Actual value '{sActual}'")			[ ] 		[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Items_View4  			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aExpected)	[+] //PopUpList_Items_View4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_View4		[ ] // Purpose:			This function will report the curently selected item from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "PopUpList_Items_View4", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sExpected, sActual	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] // Grab the item in the PopUp Listbox		[ ] sActual = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.GetSelText ()		[ ] sExpected = aExpected[1]		[ ] 		[+] if (sExpected == sActual)			[ ] 			[ ] print("Item '{sActual}' verified OK")			[ ] 		[+] else			[ ] 			[ ] NonFatalError ("The Expected value '{sExpected}' doesn't match the Actual value '{sActual}'")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpList_Items_View6  			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6, ANYTYPE aExpected)	[+] //PopUpList_Items_View6		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpList_Items_View6		[ ] // Purpose:			This function will report the curently selected item from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ctr6", "PopUpList_Items_View6", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sExpected, sActual	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled() )		[ ] 		[ ] // Grab the item in the PopUp Listbox		[ ] sActual = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.GetSelText ()		[ ] sExpected = aExpected[1]		[ ] 		[ ] 		[+] if (sExpected != sActual)			[ ] 			[ ] NonFatalError ("The Expected value '{sExpected}' doesn't match the Actual value '{sActual}'")			[ ] 		[+] else if ( sExpected == sActual )			[ ] 			[ ] print("Item '{sActual}' verified OK")			[ ] 		[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")		[ ] 	[ ] [ ] [+] PopUpMenu_Select_From_Treeview2	(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aValue)	[+] //PopUpMenu_Select_From_Treeview2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PopUpMenu_Select_From_Treeview2		[ ] // Purpose:			This function will select an item from a popup list.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //		[ ] //					$Text = { "/root/child/grandchild", "Edit" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "PopUpMenu_Select_From_Treeview2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] RECT rArea	[ ] 	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] // Get the rectangle of the control		[+] do			[ ] 			[ ] rArea = @sWindow.@aControl1.@aControl2.GetItemRect(aValue[1])			[ ] 		[+] except			[ ] 			[ ] FatalError ("ERROR: Couldn't get the rectangle of the item '{aValue[1]}'.")			[ ] 		[ ] 		[ ] // attempt to select the specified item		[+] do			[ ] 			[ ] @sWindow.@aControl1.@aControl2.PopUpSelect(rArea.xPos, rArea.yPos, aValue[2])			[ ] 		[+] except			[ ] 			[ ] FatalError ("ERROR: Couldn't select the item '{aValue[2]}' from the popup list.")			[ ] 		[ ] 	[+] else		[ ] NonFatalError ("The control '{aControl1}.{aControl2}' isn't enabled.")[ ] [+] PushButton_Click  		  		(STRING sWindow, ANYTYPE aControl)	[+] //PushButton_Click 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PushButton_Click		[ ] // Purpose:			This function will push the specified button.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "control", "PushButton_Click"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[+] do		[ ] 		[ ] @sWindow.@aControl.Click ()		[ ] 	[+] except		[ ] 		[ ] FatalError ("ERROR: The control '{aControl}' couldn't be clicked.")	[ ] [ ] [+] PushButton_Click2				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2)	[+] //PushButton_Click2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PushButton_Click2		[ ] // Purpose:			This function will push the specified button.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "PushButton_Click2"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[+] do		[ ] 		[ ] @sWindow.@aControl1.@aControl2.Click ()		[ ] 	[+] except		[ ] 		[ ] FatalError ("ERROR: The control '{aControl2}' couldn't be clicked.")	[ ] [ ] [+] PushButton_Click3				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3)	[+] //PushButton_Click3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PushButton_Click3		[ ] // Purpose:			This function will push the specified button.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "PushButton_Click3"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] @sWindow.@aControl1.@aControl2.@aControl3.Click ()[ ] [+] PushButton_Click5				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2,  ANYTYPE aControl3,  ANYTYPE aControl4,  ANYTYPE aControl5)	[+] //PushButton_Click_Buried5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PushButton_Click_Buried3		[ ] // Purpose:			This function will push the specified button.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "control", "PushButton_Click"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Click ()[ ] [+] PushButton_Click6				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6)	[+] //PushButton_Click6		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	PushButton_Click6		[ ] // Purpose:			This function will push the specified button.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ctr6", "PushButton_Click6"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.Click ()[ ] [+] RadioButton_Select    			(STRING sWindow, ANYTYPE aControl,  ANYTYPE aRadioButton)	[+] //RadioButton_Select		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	RadioButton_Select		[ ] // Purpose:			This function will select an item from a radio group.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Button = { "Button1" }		[ ] // Example:			testdata: "window", "control", "RadioButton_Select", $Button		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[+] do			[ ] 			[+] if 		(typeof(aRadioButton) == LIST OF STRING)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl.Select(aRadioButton[1])				[ ] 			[+] else if (typeof(aRadioButton) == INTEGER)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl.Select(aRadioButton)				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the radio button: {aRadioButton[1]}  from window.control: {sWindow}.{aControl}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] 	[ ] [ ] [+] RadioButton_Select2    			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aRadioButton)	[+] //RadioButton_Select2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	RadioButton_Select2		[ ] // Purpose:			This function will select an item from a radio group.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Button = { "Button1" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "RadioButton_Select2", $Button		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[+] do			[ ] 			[+] if 		(typeof(aRadioButton) == LIST OF STRING)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl1.@aControl2.Select(aRadioButton[1])				[ ] 			[+] else if (typeof(aRadioButton) == INTEGER)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl1.@aControl2.Select(aRadioButton)				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the radio button: '{aRadioButton}' from control: {aControl1}.{aControl2}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] RadioButton_Select3    			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3,  ANYTYPE aRadioButton)	[+] //RadioButton_Select3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	RadioButton_Select3		[ ] // Purpose:			This function will select an item from a radio group.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Button = { "Button1" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "RadioButton_Select3", $Button		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[+] do			[ ] 			[+] if 		(typeof(aRadioButton) == LIST OF STRING)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl1.@aControl2.@aControl3.Select(aRadioButton[1])				[ ] 			[+] else if (typeof(aRadioButton) == INTEGER)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl1.@aControl2.@aControl3.Select(aRadioButton)				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the radio button: {aRadioButton[1]}  from window.control: {sWindow}.{aControl1}.{aControl2}.{aControl3}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] RadioButton_Select4    			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3,  ANYTYPE aControl4, ANYTYPE aRadioButton)	[+] //RadioButton_Select4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	RadioButton_Select4		[ ] // Purpose:			This function will select an item from a radio group.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Button = { "Button1" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "RadioButton_Select4", $Button		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[+] do			[ ] 			[+] if 		(typeof(aRadioButton) == LIST OF STRING)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl1.@aControl2.@aControl3.aControl4.Select(aRadioButton[1])				[ ] 			[+] else if (typeof(aRadioButton) == INTEGER)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.Select(aRadioButton)				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the radio button: {aRadioButton[1]}  from window.control: {sWindow}.{aControl1}.{aControl2}.{aControl3}.{aControl4}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] RadioButton_Select5    			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3,  ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aRadioButton)	[+] //RadioButton_Select5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	RadioButton_Select5		[ ] // Purpose:			This function will select an item from a radio group.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Button = { "Button1" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "RadioButton_Select5", $Button		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsEnabled() )		[ ] 		[+] do			[ ] 			[+] if 		(typeof(aRadioButton) == LIST OF STRING)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl1.@aControl2.@aControl3.aControl4.@aControl5.Select(aRadioButton[1])				[ ] 			[+] else if (typeof(aRadioButton) == INTEGER)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Select(aRadioButton)				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the radio button: {aRadioButton[1]}  from window.control: {sWindow}.{aControl1}.{aControl2}.{aControl3}.{aControl4}.{aControl5}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl5}' isn't enabled.")		[ ] 	[ ] [ ] [+] RadioButton_Select6    			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3,  ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6,  ANYTYPE aRadioButton)	[+] //RadioButton_Select5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	RadioButton_Select5		[ ] // Purpose:			This function will select an item from a radio group.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Button = { "Button1" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "RadioButton_Select5", $Button		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled() )		[ ] 		[+] do			[ ] 			[+] if 		(typeof(aRadioButton) == LIST OF STRING)				[ ] 				[ ] Print ("Here")				[ ] // Select the specified button				[ ] @sWindow.@aControl1.@aControl2.@aControl3.aControl4.@aControl5.@aControl6.Select(aRadioButton[1])				[ ] 			[+] else if (typeof(aRadioButton) == INTEGER)				[ ] 				[ ] // Select the specified button				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.Select(aRadioButton)				[ ] 			[ ] 		[+] except			[ ] 			[ ] FatalError ("Couldn't select the radio button: {aRadioButton[1]}  from window.control: {sWindow}.{aControl1}.{aControl2}.{aControl3}.{aControl4}.{aControl5}.{aControl6}")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")		[ ] 	[ ] [ ] [+] RadioButton_Verify    			(STRING sWindow, ANYTYPE aControl,  ANYTYPE aRadioButton)	[+] //RadioButton_Verify		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	RadioButton_Verify		[ ] // Purpose:			This function will verify the selected item from a radio group.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Button = { "Button1" }		[ ] // Example:			testdata: "window", "control", "RadioButton_Verify", $Button		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] // Verifies that the selected item is the one we want.		[+] if 		( @sWindow.@aControl.GetSelText() == aRadioButton[1] )			[ ] 			[ ] print("The RadioButton: '{aControl}' was selected.")			[ ] 		[+] else if ( @sWindow.@aControl.GetSelText() != aRadioButton[1] )			[ ] 			[ ] NonFatalError ("The RadioButton: '{aControl}' didn't select '{aRadioButton[1]}' as expected.")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] 	[ ] [ ] [+] RadioButton_Verify4    			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3,  ANYTYPE aControl4, ANYTYPE aRadioButton)	[+] //RadioButton_Verify4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	RadioButton_Verify4		[ ] // Purpose:			This function will verify the selected item from a radio group.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Button = { "Button1" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "RadioButton_Verify4", $Button		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] // Verifies that the selected item is the one we want.		[+] if 		( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.GetSelText() == aRadioButton[1] )			[ ] 			[ ] print("The RadioButton: '{aControl4}' was selected.")			[ ] 		[+] else if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.GetSelText() != aRadioButton[1] )			[ ] 			[ ] NonFatalError ("The RadioButton: '{aControl4}' wasn't selected as expected.")			[ ] 		[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}.{aControl3}.{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] Right_Click						(STRING sWindow, ANYTYPE aControl,  ANYTYPE sItem)	[+] //Right_Click 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Right_Click		[ ] // Purpose:			This function will perform a right-click in the specified control		[ ] //					and then select the passed-in item.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "control", "Right_Click"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // get the x,y coordinates for the window	[ ] RECT rect = @sWindow.@aControl.GetRect ()	[ ] 	[ ] 	[ ] // Add 60 to the x,y position so we click within the region	[ ] @sWindow.@aControl.PopupSelect (rect.xPos + 10, rect.yPos + 60, sItem)	[ ] [ ] [+] Right_Click2					(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, STRING sItem)	[+] //Right_Click2 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Right_Click2		[ ] // Purpose:			This function will perform a right-click in the specified control		[ ] //					and then select the passed-in item.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //		[ ] // Example:			testdata: "window", "control1", "control2", "Right_Click2"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // get the x,y coordinates for the control	[ ] RECT rect = @sWindow.@aControl1.@aControl2.GetRect ()	[ ] 	[ ] 	[ ] // Add 60 to the x,y position so we click within the region	[ ] @sWindow.@aControl1.@aControl2.PopupSelect (rect.xPos + 10, rect.yPos + 60, sItem)	[ ] [ ] [+] Right_Click3					(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3,  STRING sItem)	[+] //Right_Click3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Right_Click3		[ ] // Purpose:			This function will perform a right-click in the specified control		[ ] //					and then select the passed-in item.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					STRING (the name of Control3)		[ ] //		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "Right_Click3"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // get the x,y coordinates for the window	[ ] RECT rect = @sWindow.@aControl1.@aControl2.@aControl3.GetRect ()	[ ] 	[ ] 	[ ] // Add 60 to the x,y position so we click within the region	[ ] @sWindow.@aControl1.@aControl2.@aControl3.PopupSelect (rect.xPos + 10, rect.yPos + 60, sItem)	[ ] [ ] [+] Tab_Select 						(STRING sWindow, ANYTYPE aControl,  ANYTYPE aTab)	[+] //Tab_Select		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Tab_Select		[ ] // Purpose:			This function will select the specified tab.		[ ] //		[ ] //					$Item = { "Item1" }		[ ] // Example:			testdata: "window", "control", "Tab_Select", $Item		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] @sWindow.@aControl.Select (aTab)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control {aControl} isn't enabled.")		[ ] 	[ ] [ ] [+] Tab_Select2 					(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aTab)	[+] //Tab_Select		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Tab_Select		[ ] // Purpose:			This function will select the specified tab.		[ ] //		[ ] //					$Item = { "Item1" }		[ ] // Example:			testdata: "window", "control", "Tab_Select", $Item		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] @sWindow.@aControl1.@aControl2.Select (aTab)		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] Table_Select 					(STRING sWindow, STRING sTable,     ANYTYPE aTable)	[+] //Table_Select 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Table_Select		[ ] // Purpose:			This function will select an entry from a table.		[ ] //		[ ] // Inputs:			STRING 			(the name of the table)		[ ] //					STRING 			(the items to select)		[ ] //					LIST OF STRING  (the list of items to select)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "Table_Select", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@sTable.IsEnabled() )		[ ] 		[ ] LIST OF STRING lsContents = @sWindow.@sTable.GetContents ()		[ ] print (lsContents)		[ ] 		[ ] 		[ ] INTEGER iCount = @sWindow.@sTable.GetVisibleRowCount ()		[ ] print (iCount)		[ ] 		[ ] 		[ ] TABLECELL tcCell = @sWindow.@sTable.FindCell (aTable[1])		[ ] 		[ ] //@sWindow.@sTable.SelectRow (tcCell, TRUE, TRUE)	[+] else		[ ] 		[ ] NonFatalError ("The control {sTable} isn't enabled.")		[ ] 	[ ] [ ] [+] Table_Set 						(STRING sTable,  ANYTYPE aTable)	[+] //Table_Set		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Table_Set		[ ] // Purpose:			This function will set (enter) items into a table.		[ ] //		[ ] // Inputs:			STRING (the name of the table)		[ ] //					STRING (the list of items to select)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "Table_Set", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] 	[ ] LIST OF LIST OF ANYTYPE llaVals = {{1001, "Jones"}, {1002, "Carullo"}}	[ ] TABLERANGE TableRange = {{1,1}, {2,2}}	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sTable.IsEnabled() )		[ ] 		[ ] WINDOW wAdd = DialogBox("Add-Only Table").Table("#1")		[ ] 		[ ] wAdd.SetRangeValue (TableRange, llaVals)	[+] else		[ ] NonFatalError ("The control {sTable} isn't enabled.")[ ] [+] Table_Verify 					(STRING sWindow, STRING sTable,     ANYTYPE aTable)	[+] //Table_Verify		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Table_Verify		[ ] // Purpose:			This function will verify the items within a table.		[ ] //		[ ] // Inputs:							[ ] //					STRING (the name of the Window)		[ ] //					STRING (the name of the Table)		[ ] //					STRING (the items to verify)		[ ] //		[ ] //					$Item = { "Item1" }		[ ] // Example:			testdata: "window", "control", "Table_Verify", $Item		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] STRING sCell = @sWindow.@sTable.GetFocusCell ()	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@sTable.IsEnabled() )		[ ] 		[+] if ( @sWindow.@sTable.GetCellValue(sCell ) == aTable )			[ ] 			[ ] print ("Contents match")			[ ] 		[+] else			[ ] 			[ ] print ("Contents don't match")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control {sTable} isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Set   				(STRING sWindow, ANYTYPE aControl,  ANYTYPE aText)	[+] //Text_Field_Set		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Set		[ ] // Purpose:			This function will set the specified text into the control.		[ ] //					This function is used when there exists a value already in		[ ] //					a text field and you need to override the value rather than		[ ] //					append the new string onto the end of the existing string.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "Text_Field_Set", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Convert the passed-in value into a STRING	[ ] STRING sValue, Big_String = ""	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[-] if (@sWindow.@aControl.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is an empty list of size zero then we'll log an error to the results file.		[ ] 		[-] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // For every element in aText, put it into a big string			[+] for each sValue in aText				[ ] Big_String = Big_String + sValue			[ ] 			[ ] // Set the specified text into the control. If the control cannot be found			[ ] // during execution, then we'll log an error to the results file and the			[ ] // script will exit.			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl.ClearText()				[ ] @sWindow.@aControl.SetText  (Big_String)				[ ] print ("Setting the control {aControl} to '{Big_String}'.")				[ ] 			[+] except				[ ] 				[ ] FatalError("Unable to Set the text for '{aControl}'")				[ ] 			[ ] 		[ ] 	[+] else		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")	[ ] [ ] [+] Text_Field_Set2  				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aText)	[+] //Text_Field_Set2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Set2		[ ] // Purpose:			This function will set the specified text into the control.		[ ] //					This function is used when there exists a value already in		[ ] //					a text field and you need to override the value rather than		[ ] //					append the new string onto the end of the existing string.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "Text_Field_Set2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Convert the passed-in value into a STRING	[ ] STRING sValue, Big_String = ""	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is an empty list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // For every element in aText, put it into a big string			[+] for each sValue in aText				[ ] Big_String = Big_String + sValue			[ ] 			[ ] // Set the specified text into the control. If the control cannot be found			[ ] // during execution, then we'll log an error to the results file and the			[ ] // script will exit.			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.ClearText()				[ ] @sWindow.@aControl1.@aControl2.SetText  (Big_String)				[ ] print ("Setting the control {aControl2} to '{Big_String}'.")				[ ] 			[+] except				[ ] 				[ ] FatalError("Unable to Set the text for '{aControl2}'")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Set3  				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, LIST OF ANYTYPE aText)	[+] //Text_Field_Set3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Set3		[ ] // Purpose:			This function will set the specified text into the control.		[ ] //					This function is used when there exists a value already in		[ ] //					a text field and you need to override the value rather than		[ ] //					append the new string onto the end of the existing string.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "Text_Field_Set3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Convert the passed-in value into a STRING	[ ] STRING sValue, Big_String = ""	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is an empty list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // For every element in aText, put it into a big string			[+] for each sValue in aText				[ ] 				[ ] Big_String = Big_String + sValue				[ ] 			[ ] 			[ ] // Set the specified text into the control. If the control cannot be found			[ ] // during execution, then we'll log an error to the results file and the			[ ] // script will exit.			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.ClearText()				[ ] @sWindow.@aControl1.@aControl2.@aControl3.SetText  (Big_String)				[ ] print ("Setting the control {aControl3} to '{Big_String}'.")				[ ] 			[+] except				[ ] 				[ ] FatalError("Unable to Set the text for '{aControl3}'")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}.{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Set4   				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aText)	[+] //Text_Field_Set4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Set4		[ ] // Purpose:			This function will set the specified text into the control.		[ ] //					This function is used when there exists a value already in		[ ] //					a text field and you need to override the value rather than		[ ] //					append the new string onto the end of the existing string.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "Text_Field_Set4", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Convert the passed-in value into a STRING	[ ] STRING sValue, Big_String = ""	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is an empty list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // For every element in aText, put it into a big string			[+] for each sValue in aText				[ ] Big_String = Big_String + sValue			[ ] 			[ ] // Set the specified text into the control. If the control cannot be found			[ ] // during execution, then we'll log an error to the results file and the			[ ] // script will exit.			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.ClearText()				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.SetText(Big_String)				[ ] print ("Setting the control {aControl4} to '{Big_String}'.")				[ ] 			[+] except				[ ] 				[ ] FatalError("Unable to Set the text for '{aControl4}'")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Set5   				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5,  ANYTYPE aText)	[+] //Text_Field_Set5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Set5		[ ] // Purpose:			This function will set the specified text into the control.		[ ] //					This function is used when there exists a value already in		[ ] //					a text field and you need to override the value rather than		[ ] //					append the new string onto the end of the existing string.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "Text_Field_Set5", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Convert the passed-in value into a STRING	[ ] STRING sValue, Big_String = ""	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is an empty list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // For every element in aText, put it into a big string			[+] for each sValue in aText				[ ] Big_String = Big_String + sValue			[ ] 			[ ] // Set the specified text into the control. If the control cannot be found			[ ] // during execution, then we'll log an error to the results file and the			[ ] // script will exit.			[ ] 			[+] do				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.ClearText()				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.SetText(Big_String)				[ ] print ("Setting the control {aControl5} to '{Big_String}'.")				[ ] 			[+] except				[ ] 				[ ] FatalError("Unable to Set the text for '{aControl5}'")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl5}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Set6   				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6, ANYTYPE aText)	[+] //Text_Field_Set6		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Set6		[ ] // Purpose:			This function will set the specified text into the control.		[ ] //					This function is used when there exists a value already in		[ ] //					a text field and you need to override the value rather than		[ ] //					append the new string onto the end of the existing string.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ctr6", "Text_Field_Set6", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Convert the passed-in value into a STRING	[ ] STRING sValue, Big_String = ""	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is an empty list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // For every element in aText, put it into a big string			[+] for each sValue in aText				[ ] Big_String = Big_String + sValue			[ ] Print (Big_String)			[ ] 			[ ] // Set the specified text into the control. If the control cannot be found			[ ] // during execution, then we'll log an error to the results file and the			[ ] // script will exit.			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.ClearText()				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.SetText(Big_String)				[ ] print ("Setting the control {aControl6} to '{Big_String}'.")				[ ] 			[+] except				[ ] 				[ ] FatalError("Unable to Set the text for '{aControl6}'")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Set7   				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6, ANYTYPE aControl7, ANYTYPE aText)	[+] //Text_Field_Set7		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Set7		[ ] // Purpose:			This function will set the specified text into the control.		[ ] //					This function is used when there exists a value already in		[ ] //					a text field and you need to override the value rather than		[ ] //					append the new string onto the end of the existing string.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ctr6", "ctr7", "Text_Field_Set7", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Convert the passed-in value into a STRING	[ ] STRING sValue, Big_String = ""	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.@aControl7.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is an empty list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // For every element in aText, put it into a big string			[+] for each sValue in aText				[ ] Big_String = Big_String + sValue			[ ] 			[ ] 			[ ] // Set the specified text into the control. If the control cannot be found			[ ] // during execution, then we'll log an error to the results file and the			[ ] // script will exit.			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.@aControl7.ClearText()				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.@aControl7.SetText(Big_String)				[ ] print ("Setting the control {aControl7} to '{Big_String}'.")				[ ] 			[+] except				[ ] 				[ ] FatalError("Unable to Set the text for '{aControl7}'")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl7}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Type   				(STRING sWindow, ANYTYPE aControl,  ANYTYPE aText)	[+] //Text_Field_Type		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Type		[ ] // Purpose:			This function will enter the specified text into the control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "Text_Field_Type", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sValue	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is a list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // Enter the specified text into the control.			[+] for each sValue in aText				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl.TypeKeys(sValue)					[ ] print ("Setting the control {aControl} to '{sValue}'.")					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' ")					[ ] 				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Type2   				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2,  ANYTYPE aText)	[+] //Text_Field_Type2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Type2		[ ] // Purpose:			This function will enter the specified text into the control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "Text_Field_Type2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sValue	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is a list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // Enter the specified text into the control.			[+] for each sValue in aText				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.TypeKeys(sValue)					[ ] print ("Setting the control {aControl2} to '{sValue}'.")					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' ")					[ ] 				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Type3   				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, LIST OF ANYTYPE aText)	[+] // *** Text_Field_Type3 Header ***		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Type3		[ ] // Purpose:			This function will enter the specified text into the control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "Text_Field_Type3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sValue	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is a list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // Enter the specified text into the control.			[+] for each sValue in aText				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.@aControl3.TypeKeys(sValue)					[ ] print ("Setting the control {aControl3} to '{sValue}'.")					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' ")					[ ] 				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}.{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Type4   				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, LIST OF ANYTYPE aText)	[+] // Text_Field_Type4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Type4		[ ] // Purpose:			This function will enter the specified text into the control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "Text_Field_Type4", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sValue	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is a list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // Enter the specified text into the control.			[+] for each sValue in aText				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.TypeKeys(sValue)					[ ] print ("Setting the control {aControl4} to '{sValue}'.")					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' ")					[ ] 				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}.{aControl3}.{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Type6   				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6, LIST OF ANYTYPE aText)	[+] // Text_Field_Type6		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Type6		[ ] // Purpose:			This function will enter the specified text into the control.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the value to type into the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ctr6", "Text_Field_Type6", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sValue	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled())		[ ] 		[ ] // Check the data type of the parameter passed 'aText'.  If the data type		[ ] // is a list of size zero then we'll log an error to the results file.		[ ] 		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 0 )			[ ] 			[ ] NonFatalError("Parameter value passed is empty; check testplan. ")			[ ] 		[+] else			[ ] 			[ ] // Enter the specified text into the control.			[+] for each sValue in aText				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.TypeKeys(sValue)					[ ] print ("Setting the control {aControl6} to '{sValue}'.")					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' ")					[ ] 				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Verify 				(STRING sWindow, ANYTYPE aControl,  ANYTYPE aText)	[+] //Text_Field_Verify		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Verify		[ ] // Purpose:			This function will verify the text in the field.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the text to verify)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "Text_Field_Verify", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sActual = ""	[ ] LIST OF STRING lsActual = { "" }	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl.IsEnabled() )		[ ] 		[ ] // Get the text from the control and remove the seperators.		[+] if ( @sWindow.@aControl.IsMultiText() )			[ ] 			[ ] 			[ ] lsActual = @sWindow.@aControl.GetMultiText()			[ ] 			[ ] INTEGER i, iCount = Listcount(lsActual)			[ ] 			[ ] 			[+] for (i=1; i <= iCount; i++)				[ ] sActual = sActual + lsActual[i]			[ ] 			[ ] 		[+] else			[ ] 			[ ] sActual = @sWindow.@aControl.GetText()		[ ] 		[ ] 		[ ] // Compare the expected value to the actual value		[+] if 		( typeof(aText) == LIST OF STRING && ListCount(aText) == 1 )			[ ] 			[ ] 			[ ] // check for an invalid match			[+] if (aText[1] != sActual)				[ ] 				[ ] NonFatalError ("Expected string: '" + aText[1] + "' isn't equal to Actual: '" + sActual + "'"  )			[+] else				[ ] 				[ ] print("Item '{sActual}' verified OK")				[ ] 			[ ] 			[ ] 		[+] else if ( typeof(aText) == LIST OF STRING && ListCount(aText) > 1 )			[ ] 			[ ] NonFatalError("Too many parameters in list; check testplan. ")			[ ] 		[+] else 			[ ] 			[ ] NonFatalError("'{aText}' should be a LIST OF STRING.")			[ ] 		[ ] 	[+] else		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")	[ ] [ ] [+] Text_Field_Verify2 				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aText)	[+] //Text_Field_Verify2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Verify2		[ ] // Purpose:			This function will verify the text in the field.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the text to verify)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr11", "ctr12", "Text_Field_Verify2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sActual = ""	[ ] LIST OF STRING lsActual = { "" }	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] // Get the text from the control and remove the seperators.		[+] if ( @sWindow.@aControl1.@aControl2.IsMultiText() )			[ ] 			[ ] lsActual = @sWindow.@aControl1.@aControl2.GetMultiText()			[ ] 			[ ] INTEGER i, iCount = Listcount(lsActual)			[ ] 			[+] for (i=1; i <= iCount; i++)				[ ] 				[ ] sActual = sActual + lsActual[i]				[ ] 			[ ] 			[ ] 		[+] else			[ ] 			[ ] sActual = @sWindow.@aControl1.@aControl2.GetText()		[ ] 		[ ] 		[ ] // Compare the expected value to the actual value		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 1 )			[ ] 			[ ] 			[ ] // check for an invalid match			[+] if (aText[1] != sActual)				[ ] 				[ ] NonFatalError ("Expected string: '" + aText[1] + "' isn't equal to Actual: '" + sActual + "'"  )			[+] else				[ ] 				[ ] print("Item '{sActual}' verified OK")				[ ] 			[ ] 			[ ] 		[+] else if ( typeof(aText) == LIST OF STRING && ListCount(aText) > 1 )			[ ] 			[ ] NonFatalError("Too many parameters in list; check testplan. ")			[ ] 		[+] else 			[ ] 			[ ] NonFatalError("Unknown parameter value '{aText}'; check testplan.")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Verify3 				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aText)	[+] //Text_Field_Verify3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Verify3		[ ] // Purpose:			This function will verify the text in the field.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the text to verify)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr12", "ctr13", "Text_Field_Verify3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sActual = ""	[ ] LIST OF STRING lsActual = { "" }	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] // Get the text from the control and remove the seperators.		[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsMultiText() )			[ ] 			[ ] lsActual = @sWindow.@aControl1.@aControl2.@aControl3.GetMultiText()			[ ] 			[ ] INTEGER i, iCount = Listcount(lsActual)			[ ] 			[ ] 			[+] for (i=1; i <= iCount; i++)				[ ] 				[ ] sActual = sActual + lsActual[i]				[ ] 			[ ] 			[ ] 		[+] else			[ ] 			[ ] sActual = @sWindow.@aControl1.@aControl2.@aControl3.GetText()		[ ] 		[ ] 		[ ] // Compare the expected value to the actual value		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 1 )			[ ] 			[ ] // check for an valid match			[+] if (aText[1] == sActual)				[ ] 				[ ] print("Item '{sActual}' verified OK")				[ ] 			[+] else				[ ] 				[ ] NonFatalError ("Expected string: '" + aText[1] + "' isn't equal to Actual: '" + sActual + "'"  )				[ ] 			[ ] 			[ ] 		[+] else if ( typeof(aText) == LIST OF STRING && ListCount(aText) > 1 )			[ ] 			[ ] NonFatalError("Too many parameters in list; check testplan. ")			[ ] 		[+] else 			[ ] 			[ ] NonFatalError("Unknown parameter value '{aText}'; check testplan.")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}'.'{aControl2}'.'{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Verify4 				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aText)	[+] //Text_Field_Verify4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Verify4		[ ] // Purpose:			This function will verify the text in the field.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the text to verify)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr12", "ctr13", "ctr14", "Text_Field_Verify4", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sActual = ""	[ ] LIST OF STRING lsActual = { "" }	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] // Get the text from the control and remove the seperators.		[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsMultiText() )			[ ] 			[ ] lsActual = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.GetMultiText()			[ ] 			[ ] INTEGER i, iCount = Listcount(lsActual)			[ ] 			[ ] 			[+] for (i=1; i <= iCount; i++)				[ ] 				[ ] sActual = sActual + lsActual[i]				[ ] 			[ ] 			[ ] 		[+] else			[ ] 			[ ] sActual = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.GetText()		[ ] 		[ ] 		[ ] // Compare the expected value to the actual value		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 1 )			[ ] 			[ ] // check for an invalid match			[+] if (aText[1] != sActual)				[ ] 				[ ] NonFatalError ("Expected string: '" + aText[1] + "' isn't equal to Actual: '" + sActual + "'"  )				[ ] 			[+] else				[ ] 				[ ] print("Item '{sActual}' verified OK")				[ ] 			[ ] 			[ ] 		[+] else if ( typeof(aText) == LIST OF STRING && ListCount(aText) > 1 )			[ ] 			[ ] NonFatalError("Too many parameters in list; check testplan. ")			[ ] 		[+] else 			[ ] 			[ ] NonFatalError("Unknown parameter value '{aText}'; check testplan.")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}.{aControl3}.{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] Text_Field_Verify5 				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5,  ANYTYPE aText)	[+] //Text_Field_Verify5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Verify		[ ] // Purpose:			This function will verify the text in the field.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the text to verify)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control", "Text_Field_Verify", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sActual = ""	[ ] LIST OF STRING lsActual = { "" }	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsEnabled() )		[ ] 		[ ] // Get the text from the control and remove the seperators.		[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsMultiText() )			[ ] 			[ ] 			[ ] lsActual = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.GetMultiText()			[ ] 			[ ] INTEGER i, iCount = Listcount(lsActual)			[ ] 			[ ] 			[+] for (i=1; i <= iCount; i++)				[ ] sActual = sActual + lsActual[i]			[ ] 			[ ] 		[+] else			[ ] 			[ ] sActual = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.GetText()		[ ] 		[ ] 		[ ] // Compare the expected value to the actual value		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 1 )			[ ] 			[ ] 			[ ] // check for an invalid match			[+] if (aText[1] != sActual)				[ ] 				[ ] NonFatalError ("Expected string: '" + aText[1] + "' isn't equal to Actual: '" + sActual + "'"  )			[+] else				[ ] 				[ ] print("Item '{sActual}' verified OK")				[ ] 			[ ] 			[ ] 		[+] else if ( typeof(aText) == LIST OF STRING && ListCount(aText) > 1 )			[ ] 			[ ] NonFatalError("Too many parameters in list; check testplan. ")			[ ] 		[+] else 			[ ] 			[ ] NonFatalError("Unknown parameter value '{aText}'; check testplan.")			[ ] 		[ ] 	[+] else		[ ] NonFatalError ("The control '{aControl5}' isn't enabled.")	[ ] [ ] [+] Text_Field_Verify6 				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5,  ANYTYPE aControl6,  ANYTYPE aText)	[+] //Text_Field_Verify6		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Text_Field_Verify6		[ ] // Purpose:			This function will verify the text in the field.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the text to verify)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "ctr6", "Text_Field_Verify6", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING sActual = ""	[ ] LIST OF STRING lsActual = { "" }	[ ] 	[ ] // Verify that the control is enabled	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled() )		[ ] 		[ ] // Get the text from the control and remove the seperators.		[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsMultiText() )			[ ] 			[ ] lsActual = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.GetMultiText()			[ ] 			[ ] INTEGER i, iCount = Listcount(lsActual)			[ ] 			[+] for (i=1; i <= iCount; i++)				[ ] 				[ ] sActual = sActual + lsActual[i]				[ ] 			[ ] 			[ ] 		[+] else			[ ] 			[ ] sActual = @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.GetText()			[ ] 		[ ] 		[ ] 		[ ] // Compare the expected value to the actual value		[+] if ( typeof(aText) == LIST OF STRING && ListCount(aText) == 1 )			[ ] 			[ ] 			[ ] // check for an invalid match			[+] if (aText[1] != sActual)				[ ] 				[ ] NonFatalError ("Expected string: '" + aText[1] + "' isn't equal to Actual: '" + sActual + "'"  )			[+] else				[ ] 				[ ] print("Item '{sActual}' verified OK")				[ ] 			[ ] 			[ ] 		[+] else if ( typeof(aText) == LIST OF STRING && ListCount(aText) > 1 )			[ ] 			[ ] NonFatalError("Too many parameters in list; check testplan. ")			[ ] 		[+] else 			[ ] 			[ ] NonFatalError("Unknown parameter value '{aText}'; check testplan.")			[ ] 		[ ] 	[+] else		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")	[ ] [ ] [+] TreeView_PopupSelect2 			(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aItem)	[+] //TreeView_PopupSelect2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	TreeView_PopupSelect2		[ ] // Purpose:			This function will select one item from a listview control		[ ] //					that's buried that right click on that item.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "/Primary", "Add Service" }		[ ] // Example:			testdata: "window", "control1", "control2", "TreeView_PopupSelect2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItem) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] POINT pCursor		[ ] 		[+] do			[ ] 			[ ] @sWindow.@aControl1.@aControl2.Select(aItem[1])			[ ] pCursor = Cursor.GetPosition ()			[ ] @sWindow.@aControl1.@aControl2.PopupSelect(pCursor.x - 100, pCursor.y - 190, aItem[2])			[ ] 		[+] except			[ ] 			[ ] FatalError ("ERROR: Item '{aItem[1]}' was not found")			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl1}.{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] TreeView_Select2 				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aItem)	[+] //TreeView_Select2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	TreeView_Select2		[ ] // Purpose:			This function will select one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "foo" }		[ ] // Example:			testdata: "window", "control1", "control2", "TreeView_Select2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItem) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] // First, try to select the specified item if it's visible		[+] do			[ ] 			[ ] @sWindow.@aControl1.@aControl2.Select(aItem[1])			[ ] 		[+] except			[ ] 			[ ] // Second, get the individual items to expand			[ ] STRING sLevel1 = GetField (aItem[1], '/', 1)			[ ] STRING sLevel2 = GetField (aItem[1], '/', 2)			[ ] STRING sLevel3 = GetField (aItem[1], '/', 3)			[ ] STRING sLevel4 = GetField (aItem[1], '/', 4)			[ ] 			[ ] STRING sExpand1 = sLevel1 + "/" + sLevel2 + "/" + sLevel3			[ ] STRING sExpand2 = sLevel1 + "/" + sLevel2 + "/" + sLevel3 + "/" + sLevel4			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.Expand(sExpand1)				[ ] sleep(1)				[ ] @sWindow.@aControl1.@aControl2.Expand(sExpand2)				[ ] @sWindow.@aControl1.@aControl2.Select(aItem[1])				[ ] 			[+] except				[ ] 				[ ] FatalError ("ERROR: Item '{aItem[1]}' was not found")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] TreeView_Select3 				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aItem)	[+] //TreeView_Select3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	TreeView_Select3		[ ] // Purpose:			This function will select one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "/Services Effective*/Packages/Subscriptions/PERSONAL CHOICE A" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "TreeView_Select3", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.IsEnabled() )		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItem) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] // First, try to select the specified item if it's visible		[+] do			[ ] 			[ ] @sWindow.@aControl1.@aControl2.@aControl3.Select(aItem[1])			[ ] 		[+] except			[ ] 			[ ] // Second, get the individual items to expand			[ ] STRING sLevel1 = GetField (aItem[1], '/', 1)			[ ] STRING sLevel2 = GetField (aItem[1], '/', 2)			[ ] STRING sLevel3 = GetField (aItem[1], '/', 3)			[ ] STRING sLevel4 = GetField (aItem[1], '/', 4)			[ ] 			[ ] STRING sExpand1 = sLevel1 + "/" + sLevel2 + "/" + sLevel3			[ ] STRING sExpand2 = sLevel1 + "/" + sLevel2 + "/" + sLevel3 + "/" + sLevel4			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.Expand(sExpand1)				[ ] sleep(1)				[ ] @sWindow.@aControl1.@aControl2.@aControl3.Expand(sExpand2)				[ ] @sWindow.@aControl1.@aControl2.@aControl3.Select(aItem[1])				[ ] 			[+] except				[ ] 				[ ] FatalError ("ERROR: Item '{aItem[1]}' was not found")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] TreeView_Select4 				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aItem)	[+] //TreeView_Select4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	TreeView_Select4		[ ] // Purpose:			This function will select one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "/Services Effective*/Packages/Subscriptions/PERSONAL CHOICE A" }		[ ] // Example:			testdata: "window", "control1", "control2", "TreeView_Select4", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItem) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] // First, try to select the specified item if it's visible		[+] do			[ ] 			[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.Select(aItem[1])			[ ] 		[+] except			[ ] 			[ ] // Second, get the individual items to expand			[ ] STRING sLevel1 = GetField (aItem[1], '/', 1)			[ ] STRING sLevel2 = GetField (aItem[1], '/', 2)			[ ] STRING sLevel3 = GetField (aItem[1], '/', 3)			[ ] STRING sLevel4 = GetField (aItem[1], '/', 4)			[ ] 			[ ] STRING sExpand1 = sLevel1 + "/" + sLevel2 + "/" + sLevel3			[ ] STRING sExpand2 = sLevel1 + "/" + sLevel2 + "/" + sLevel3 + "/" + sLevel4			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.Expand(sExpand1)				[ ] sleep(1)				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.Expand(sExpand2)				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.Select(aItem[1])				[ ] 			[+] except				[ ] 				[ ] FatalError ("ERROR: Item '{aItem[1]}' was not found")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] TreeView_Select5 				(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aItem)	[+] //TreeView_Select4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	TreeView_Select4		[ ] // Purpose:			This function will select one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "/Services Effective*/Packages/Subscriptions/PERSONAL CHOICE A" }		[ ] // Example:			testdata: "window", "control1", "control2", "TreeView_Select4", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( aItem == NULL )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] // First, try to select the specified item if it's visible		[+] do			[ ] 			[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Select(aItem)			[ ] 		[+] except			[ ] 			[ ] // Second, get the individual items to expand			[ ] STRING sLevel1 = GetField (aItem[1], '/', 1)			[ ] STRING sLevel2 = GetField (aItem[1], '/', 2)			[ ] STRING sLevel3 = GetField (aItem[1], '/', 3)			[ ] STRING sLevel4 = GetField (aItem[1], '/', 4)			[ ] 			[ ] STRING sExpand1 = sLevel1 + "/" + sLevel2 + "/" + sLevel3			[ ] STRING sExpand2 = sLevel1 + "/" + sLevel2 + "/" + sLevel3 + "/" + sLevel4			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Expand(sExpand1)				[ ] sleep(1)				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Expand(sExpand2)				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Select(aItem[1])				[ ] 			[+] except				[ ] 				[ ] FatalError ("ERROR: Item '{aItem[1]}' was not found")				[ ] 				[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl5}' isn't enabled.")		[ ] 	[ ] [ ] [+] TreeView_View2 					(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aItem)	[+] //TreeView_View2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	TreeView_View2		[ ] // Purpose:			This function will view one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "/Services Effective*/Packages/Subscriptions/PERSONAL CHOICE A" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "TreeView_View2", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItem) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] // First, try to select the specified item if it's visible		[+] do			[ ] 			[ ] @sWindow.@aControl1.@aControl2.Select(aItem[1])			[ ] 		[+] except			[ ] 			[+] if (aItem[2] == "found")				[ ] 				[ ] // Second, get the individual items to expand				[ ] STRING sLevel1 = GetField (aItem[1], '/', 1)				[ ] STRING sLevel2 = GetField (aItem[1], '/', 2)				[ ] STRING sLevel3 = GetField (aItem[1], '/', 3)				[ ] STRING sLevel4 = GetField (aItem[1], '/', 4)				[ ] 				[ ] STRING sExpand1 = sLevel1 + "/" + sLevel2 + "/" + sLevel3				[ ] STRING sExpand2 = sLevel1 + "/" + sLevel2 + "/" + sLevel3 + "/" + sLevel4				[ ] 				[ ] @sWindow.@aControl1.@aControl2.Expand(sExpand1)				[ ] sleep(1)				[ ] @sWindow.@aControl1.@aControl2.Expand(sExpand2)				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.Select(aItem[1])					[ ] 					[+] if (aItem[2] == "found")						[ ] 						[ ] print ("The item '{aItem[1]}' was found as expected.")						[ ] 					[+] else						[ ] 						[ ] FatalError ("ERROR: The item '{aItem[1]}' wasn't found as expected.")						[ ] 					[ ] 				[+] except					[ ] 					[+] if (aItem[2] == "found")						[ ] 						[ ] FatalError ("ERROR: The item '{aItem[1]}' was found and wasn't expected to be.")						[ ] 					[+] else						[ ] 						[ ] print ("The item '{aItem[1]}' wasn't found as expected.")						[ ] 					[ ] 				[ ] 			[+] else				[ ] 				[ ] print ("The node '{aItem[1]}' wasn't found in the treeview as expected.")				[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl2}' isn't enabled.")		[ ] 	[ ] 	[ ] [ ] [+] TreeView_View5 					(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aItem)	[+] //TreeView_View5		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	TreeView_View5		[ ] // Purpose:			This function will view one item from a listview control		[ ] //					that's buried.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of Control1)		[ ] //					STRING (the name of Control2)		[ ] //					ANYTYPE (the value to select from the control)		[ ] //		[ ] //					$Text = { "/Services Effective*/Packages/Subscriptions/PERSONAL CHOICE A" }		[ ] // Example:			testdata: "window", "ctr1", "ctr2", "ctr3", "ctr4", "ctr5", "TreeView_View5", $Text		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[ ] // Verify that the control is enabled.	[+] if ( @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.IsEnabled() )		[ ] 		[ ] 		[ ] // Check if the list is empty. If so, log an error to the results file.		[+] if ( ListCount(aItem) == 0 )			[ ] 			[ ] FatalError("Parameter value passed is empty ")			[ ] 		[ ] 		[ ] // First, try to select the specified item if it's visible		[+] do			[ ] 			[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Select(aItem[1])			[ ] 		[+] except			[ ] 			[+] if (aItem[2] == "found")				[ ] 				[ ] // Second, get the individual items to expand				[ ] STRING sLevel1 = GetField (aItem[1], '/', 1)				[ ] STRING sLevel2 = GetField (aItem[1], '/', 2)				[ ] STRING sLevel3 = GetField (aItem[1], '/', 3)				[ ] STRING sLevel4 = GetField (aItem[1], '/', 4)				[ ] 				[ ] STRING sExpand1 = sLevel1 + "/" + sLevel2 + "/" + sLevel3				[ ] STRING sExpand2 = sLevel1 + "/" + sLevel2 + "/" + sLevel3 + "/" + sLevel4				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Expand(sExpand1)				[ ] sleep(1)				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Expand(sExpand2)				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.Select(aItem[1])					[ ] 					[+] if (aItem[2] == "found")						[ ] 						[ ] print ("The item '{aItem[1]}' was found as expected.")						[ ] 					[+] else						[ ] 						[ ] FatalError ("ERROR: The item '{aItem[1]}' wasn't found as expected.")						[ ] 					[ ] 				[+] except					[ ] 					[+] if (aItem[2] == "found")						[ ] 						[ ] FatalError ("ERROR: The item '{aItem[1]}' was found and wasn't expected to be.")						[ ] 					[+] else						[ ] 						[ ] print ("The item '{aItem[1]}' wasn't found as expected.")						[ ] 					[ ] 				[ ] 			[+] else				[ ] 				[ ] print ("The node '{aItem[1]}' wasn't found in the treeview as expected.")				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl5}' isn't enabled.")		[ ] 	[ ] 	[ ] [ ] [+] TypeKeys  						(STRING sWindow, ANYTYPE aControl,  ANYTYPE aKey)	[+] //TypeKeys		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:					John Connolly		[ ] // Function name:			TypeKeys		[ ] // Purpose:					This function will press a key(s) an optional number of times.		[ ] //		[ ] // Inputs:					STRING (the name of the Window)		[ ] //							ANYTYPE (the key to press and the number of times to press it)		[ ] //		[+] // Calling examples:			[ ] //							Press Key example		// Press the Alt key once			[ ] //								$KeyToPress = { "Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the Shift-Alt key once			[ ] //								$KeyToPress = { "Shift-Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the 'Up' key twice			[ ] //								$KeyToPress = { "UP", 2}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sKey	[ ] INTEGER iIteration, lsCountIterations	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.IsEnabled())		[ ] 		[ ] // Get the # of items in the list: aKey.		[ ] lsCountIterations = ListCount(aKey)		[ ] 		[ ] 		[ ] // Get the Key to press if it's a STRING.		[+] if (typeof(aKey[1]) == STRING)			[ ] 			[ ] sKey = aKey[1]			[ ] 		[+] else			[ ] 			[ ] FatalError("You need to enter a Key to press of type STRING:  i.e., ""UP""")			[ ] 		[ ] 		[ ] // Get the number of times to press the key if there's a argument for it.		[+] if (lsCountIterations == 2) 			[ ] 			[+] if (typeof(aKey[2]) == INTEGER)				[ ] 				[ ] iIteration = aKey[2]				[ ] 			[+] else				[ ] 				[ ] FatalError("You need to enter the number of times to press the '{sKey}' key of type INTEGER:  i.e., 2")				[ ] 			[ ] 		[ ] 		[ ] // If there's no iteration value, press the key once. If there are errors		[ ] // using the QA Partner methods, an error will be logged to the results file		[ ] // and the script will not continue.		[ ] 		[+] if (lsCountIterations == 1)			[ ] 			[+] do				[ ] 				[ ] @sWindow.TypeKeys ("<{sKey}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.TypeKeys ("{sKey}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' ")					[ ] 				[ ] 			[ ] 		[+] else			[ ] 			[ ] // Press the key n times.			[ ] 			[+] do				[ ] 				[ ] @sWindow.TypeKeys ("<{sKey} {iIteration}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.TypeKeys ("{sKey} {iIteration}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' {iIteration} times. ")					[ ] 				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The window '{sWindow}' isn't enabled.")		[ ] 	[ ] [ ] [+] Type_Keys  						(STRING sWindow, ANYTYPE aControl,  ANYTYPE aKey)	[+] //Type_Keys		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:					John Connolly		[ ] // Function name:			Type_Keys		[ ] // Purpose:					This function will press a key(s) an optional number of times.		[ ] //		[ ] // Inputs:					STRING (the name of the Window)		[ ] //							STRING - not used		[ ] //							ANYTYPE (the key to press and the number of times to press it)		[ ] //		[+] // Calling examples:			[ ] //							Press Key example		// Press the Alt key once			[ ] //								$KeyToPress = { "Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the Shift-Alt key once			[ ] //								$KeyToPress = { "Shift-Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the 'Up' key twice			[ ] //								$KeyToPress = { "UP", 2}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sKey	[ ] INTEGER iIteration, lsCountIterations	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl.IsEnabled())		[ ] // Get the # of items in the list: aKey.		[ ] lsCountIterations = ListCount(aKey)		[ ] 		[ ] 		[ ] 		[ ] // Get the Key to press if it's a STRING.		[+] if (typeof(aKey[1]) == STRING)			[ ] sKey = aKey[1]			[ ] 		[+] else			[ ] 			[ ] 			[ ] FatalError("You need to enter a Key to press of type STRING:  i.e., ""UP""")			[ ] 		[ ] 		[ ] 		[ ] 		[ ] // Get the number of times to press the key if there's a argument for it.		[+] if (lsCountIterations == 2) 			[ ] 			[+] if (typeof(aKey[2]) == INTEGER)				[ ] iIteration = aKey[2]				[ ] 			[+] else				[ ] 				[ ] 				[ ] FatalError("You need to enter the number of times to press the '{sKey}' key of type INTEGER:  i.e., 2")				[ ] 		[ ] 		[ ] 		[ ] //		[ ] // If there's no iteration value, press the key once. If there are errors		[ ] // using the QA Partner methods, an error will be logged to the results file		[ ] // and the script will not continue.		[ ] //		[ ] 		[+] if (lsCountIterations == 1)			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl.TypeKeys ("<{sKey}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl.TypeKeys ("{sKey}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' ")					[ ] 				[ ] 			[ ] 		[+] else			[ ] 			[ ] // Press the key n times.			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl.TypeKeys ("<{sKey} {iIteration}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl.TypeKeys ("{sKey} {iIteration}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' {iIteration} times. ")					[ ] 				[ ] 		[ ] 	[+] else		[ ] NonFatalError ("The control '{aControl}' isn't enabled.")	[ ] [ ] [+] Type_Keys2  					(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aKey)	[+] //Type_Keys2		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:					John Connolly		[ ] // Function name:			Type_Keys2		[ ] // Purpose:					This function will press a key(s) an optional number of times.		[ ] //		[ ] // Inputs:					STRING (the name of the Window)		[ ] //							STRING - not used		[ ] //							ANYTYPE (the key to press and the number of times to press it)		[ ] //		[+] // Calling examples:			[ ] //							Press Key example		// Press the Alt key once			[ ] //								$KeyToPress = { "Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the Shift-Alt key once			[ ] //								$KeyToPress = { "Shift-Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the 'Up' key twice			[ ] //								$KeyToPress = { "UP", 2}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sKey	[ ] INTEGER iIteration, lsCountIterations	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.IsEnabled())		[ ] 		[ ] // Get the # of items in the list: aKey.		[ ] lsCountIterations = ListCount(aKey)		[ ] 		[ ] 		[ ] // Get the Key to press if it's a STRING.		[+] if (typeof(aKey[1]) == STRING)			[ ] 			[ ] sKey = aKey[1]			[ ] 		[+] else			[ ] 			[ ] FatalError("You need to enter a Key to press of type STRING:  i.e., ""UP""")			[ ] 		[ ] 		[ ] 		[ ] // Get the number of times to press the key if there's a argument for it.		[+] if (lsCountIterations == 2) 			[ ] 			[+] if (typeof(aKey[2]) == INTEGER)				[ ] 				[ ] iIteration = aKey[2]				[ ] 			[+] else				[ ] 				[ ] FatalError("You need to enter the number of times to press the '{sKey}' key of type INTEGER:  i.e., 2")				[ ] 			[ ] 		[ ] 		[ ] 		[ ] //		[ ] // If there's no iteration value, press the key once. If there are errors		[ ] // using the QA Partner methods, an error will be logged to the results file		[ ] // and the script will not continue.		[ ] //		[ ] 		[+] if (lsCountIterations == 1)			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.TypeKeys ("<{sKey}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.TypeKeys ("{sKey}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' ")					[ ] 				[ ] 			[ ] 		[+] else			[ ] 			[ ] // Press the key n times.			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.TypeKeys ("<{sKey} {iIteration}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.TypeKeys ("{sKey} {iIteration}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' {iIteration} times. ")					[ ] 				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl2}' isn't enabled.")		[ ] 	[ ] [ ] [+] Type_Keys3  					(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aKey)	[+] //Type_Keys3		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:					John Connolly		[ ] // Function name:			Type_Keys3		[ ] // Purpose:					This function will press a key(s) an optional number of times.		[ ] //		[ ] // Inputs:					STRING (the name of the Window)		[ ] //							STRING - not used		[ ] //							ANYTYPE (the key to press and the number of times to press it)		[ ] //		[+] // Calling examples:			[ ] //							Press Key example		// Press the Alt key once			[ ] //								$KeyToPress = { "Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the Shift-Alt key once			[ ] //								$KeyToPress = { "Shift-Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the 'Up' key twice			[ ] //								$KeyToPress = { "UP", 2}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sKey	[ ] INTEGER iIteration, lsCountIterations	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.IsEnabled())		[ ] 		[ ] // Get the # of items in the list: aKey.		[ ] lsCountIterations = ListCount(aKey)		[ ] 		[ ] 		[ ] // Get the Key to press if it's a STRING.		[+] if (typeof(aKey[1]) == STRING)			[ ] 			[ ] sKey = aKey[1]			[ ] 		[+] else			[ ] 			[ ] FatalError("You need to enter a Key to press of type STRING:  i.e., ""UP""")			[ ] 		[ ] 		[ ] 		[ ] // Get the number of times to press the key if there's a argument for it.		[+] if (lsCountIterations == 2) 			[ ] 			[+] if (typeof(aKey[2]) == INTEGER)				[ ] 				[ ] iIteration = aKey[2]				[ ] 			[+] else				[ ] 				[ ] FatalError("You need to enter the number of times to press the '{sKey}' key of type INTEGER:  i.e., 2")				[ ] 			[ ] 		[ ] 		[ ] 		[ ] //		[ ] // If there's no iteration value, press the key once. If there are errors		[ ] // using the QA Partner methods, an error will be logged to the results file		[ ] // and the script will not continue.		[ ] //		[ ] 		[+] if (lsCountIterations == 1)			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.TypeKeys ("<{sKey}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.@aControl3.TypeKeys ("{sKey}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' ")					[ ] 				[ ] 			[ ] 		[+] else			[ ] 			[ ] // Press the key n times.			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.TypeKeys ("<{sKey} {iIteration}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.@aControl3.TypeKeys ("{sKey} {iIteration}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' {iIteration} times. ")					[ ] 				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl3}' isn't enabled.")		[ ] 	[ ] [ ] [+] Type_Keys4  					(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aKey)	[+] //Type_Keys4		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:					John Connolly		[ ] // Function name:			Type_Keys4		[ ] // Purpose:					This function will press a key(s) an optional number of times.		[ ] //		[ ] // Inputs:					STRING (the name of the Window)		[ ] //							ANYTYPE (the key to press and the number of times to press it)		[ ] //		[+] // Calling examples:			[ ] //							Press Key example		// Press the Alt key once			[ ] //								$KeyToPress = { "Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the Shift-Alt key once			[ ] //								$KeyToPress = { "Shift-Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the 'Up' key twice			[ ] //								$KeyToPress = { "UP", 2}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sKey	[ ] INTEGER iIteration, lsCountIterations	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.@aControl4.IsEnabled())		[ ] 		[ ] // Get the # of items in the list: aKey.		[ ] lsCountIterations = ListCount(aKey)		[ ] 		[ ] 		[ ] // Get the Key to press if it's a STRING.		[+] if (typeof(aKey[1]) == STRING)			[ ] 			[ ] sKey = aKey[1]			[ ] 		[+] else			[ ] 			[ ] FatalError("You need to enter a Key to press of type STRING:  i.e., ""UP""")			[ ] 		[ ] 		[ ] 		[ ] // Get the number of times to press the key if there's a argument for it.		[+] if (lsCountIterations == 2) 			[ ] 			[+] if (typeof(aKey[2]) == INTEGER)				[ ] 				[ ] iIteration = aKey[2]				[ ] 			[+] else				[ ] 				[ ] FatalError("You need to enter the number of times to press the '{sKey}' key of type INTEGER:  i.e., 2")				[ ] 			[ ] 		[ ] 		[ ] 		[ ] //		[ ] // If there's no iteration value, press the key once. If there are errors		[ ] // using the QA Partner methods, an error will be logged to the results file		[ ] // and the script will not continue.		[ ] //		[ ] 		[+] if (lsCountIterations == 1)			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.TypeKeys ("<{sKey}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.TypeKeys ("{sKey}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' ")					[ ] 				[ ] 			[ ] 		[+] else			[ ] 			[ ] // Press the key n times.			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.TypeKeys ("<{sKey} {iIteration}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.TypeKeys ("{sKey} {iIteration}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' {iIteration} times. ")					[ ] 				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl4}' isn't enabled.")		[ ] 	[ ] [ ] [+] Type_Keys6  					(STRING sWindow, ANYTYPE aControl1, ANYTYPE aControl2, ANYTYPE aControl3, ANYTYPE aControl4, ANYTYPE aControl5, ANYTYPE aControl6, ANYTYPE aKey)	[+] //Type_Keys6		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:					John Connolly		[ ] // Function name:			Type_Keys6		[ ] // Purpose:					This function will press a key(s) an optional number of times.		[ ] //		[ ] // Inputs:					STRING (the name of the Window)		[ ] //							ANYTYPE (the key to press and the number of times to press it)		[ ] //		[+] // Calling examples:			[ ] //							Press Key example		// Press the Alt key once			[ ] //								$KeyToPress = { "Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the Shift-Alt key once			[ ] //								$KeyToPress = { "Shift-Alt"}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress			[ ] //			[ ] //							Press Key example		// Press the 'Up' key twice			[ ] //								$KeyToPress = { "UP", 2}			[ ] //								script:	...			[ ] //								testcase TestCase_Invoker			[ ] //								testdata "ProductProfileTabs", "", "Press_Keys", $KeyToPress		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] STRING  sKey	[ ] INTEGER iIteration, lsCountIterations	[ ] 	[ ] 	[ ] // Verify that the control is enabled	[+] if (@sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.IsEnabled())		[ ] 		[ ] // Get the # of items in the list: aKey.		[ ] lsCountIterations = ListCount(aKey)		[ ] 		[ ] 		[ ] // Get the Key to press if it's a STRING.		[+] if (typeof(aKey[1]) == STRING)			[ ] 			[ ] sKey = aKey[1]			[ ] 		[+] else			[ ] 			[ ] FatalError("You need to enter a Key to press of type STRING:  i.e., ""UP""")			[ ] 		[ ] 		[ ] 		[ ] // Get the number of times to press the key if there's a argument for it.		[+] if (lsCountIterations == 2) 			[ ] 			[+] if (typeof(aKey[2]) == INTEGER)				[ ] 				[ ] iIteration = aKey[2]				[ ] 			[+] else				[ ] 				[ ] FatalError("You need to enter the number of times to press the '{sKey}' key of type INTEGER:  i.e., 2")				[ ] 			[ ] 		[ ] 		[ ] // If there's no iteration value, press the key once. If there are errors		[ ] // using the QA Partner methods, an error will be logged to the results file		[ ] // and the script will not continue.		[ ] 		[+] if (lsCountIterations == 1)			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.TypeKeys ("<{sKey}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.TypeKeys ("{sKey}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' ")					[ ] 				[ ] 			[ ] 		[+] else			[ ] 			[ ] // Press the key n times.			[ ] 			[+] do				[ ] 				[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.TypeKeys ("<{sKey} {iIteration}>") 				[ ] 			[+] except				[ ] 				[+] do					[ ] 					[ ] @sWindow.@aControl1.@aControl2.@aControl3.@aControl4.@aControl5.@aControl6.TypeKeys ("{sKey} {iIteration}") 					[ ] 				[+] except					[ ] 					[ ] FatalError("Unable to exceute method 'TypeKeys' for key '{sKey}' {iIteration} times. ")					[ ] 				[ ] 			[ ] 		[ ] 	[+] else		[ ] 		[ ] NonFatalError ("The control '{aControl6}' isn't enabled.")		[ ] 	[ ] [ ] [+] Window_Close					(STRING sWindow, ANYTYPE aControl)	[+] //Window_Close		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Window_Close		[ ] // Purpose:			This function will close the specified window.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the number of seconds to wait)		[ ] //		[ ] // Example:			testdata: "window", "", "Window_Close"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] @sWindow.Close()	[ ] [ ] [+] Window_Exists					(STRING sWindow, ANYTYPE aControl)	[+] // Window_Exist		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Window_Exist		[ ] // Purpose:			This function will determine if the specified window exists.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //		[ ] // Example:			testdata: "window", "", "Window_Exist"		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[+] if (@sWindow.Exists)		[ ] 		[ ] print ("The specified window '{sWindow}' does exist.")		[ ] 	[+] else		[ ] 		[ ] FatalError ("The specified window '{sWindow}' doesn't exist.")		[ ] 	[ ] [ ] [+] Window_Wait 					(STRING sWindow, ANYTYPE aControl,  INTEGER iWait)	[+] //Window_Wait		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author:			John Connolly		[ ] // Function name:	Window_Wait		[ ] // Purpose:			This function will wait a specified amount of time for the		[ ] //					specified window to appear.		[ ] //		[ ] // Inputs:			STRING (the name of the Window)		[ ] //					STRING (the name of the Control)		[ ] //					ANYTYPE (the number of seconds to wait)		[ ] //		[ ] //					$Wait = 30		[ ] // Example:			testdata: "window", "control", "Window_Wait", $Wait		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] BOOLEAN bFlag = FALSE	[ ] INTEGER iCount = 0	[ ] 	[+] while !(bFlag)		[ ] 		[ ] sleep (1)		[ ] iCount++		[ ] 		[+] if (@sWindow.bExists)			[ ] 			[ ] bFlag = TRUE			[ ] 		[ ] 		[ ] 		[+] if (iCount >= iWait)			[ ] 			[ ] FatalError ("The window '{sWindow}' didn't come up in {iWait} second(s).")			[ ] 		[ ] 	[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] // ******************************************************************** //[ ] //																		//[ ] //																		//[ ] //  		ERROR HANDLING FUNCTIONALITY SECTION	 					//[ ] //																		//[ ] //																		//[ ] // ******************************************************************** //[ ] [ ] [ ] [ ] [ ] // Location of error file on disk[ ] const STRING csFileDir = "C:\temp\testcase.err"[ ] [ ] [ ] [+] testcase Init_Error_Handler()	[+] //Init_Error_Handler		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author: 			John Connolly		[ ] // Function Name:	Init_Error_Handler		[ ] //		[ ] // Purpose: 		This function will initialize the error handler by		[ ] //					writing a flag bit (INTEGER) out to a data file on		[ ] //					disk.  The bit flag will be used to determine which 		[ ] //					series of scripts or test plans will be in error. If		[ ] //					the file contains a '0' all scripts will continue		[ ] //					their processing. If the flag contains a '1' all 		[ ] //					scripts will NOT continue because of a previous error		[ ] //					condition has occurred.		[ ] //		[ ] // Outputs:			HFILE		(error handling data file 'csFileDir')		[ ] // Example:			Init_Error_Handler()		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] //	[ ] // This file will create the error handler file. This file will hold the necesary 	[ ] // information for other test plans and test scripts to indicate that an erorr has 	[ ] // occurred.  The default will be to create the file and write flag of '0'	[ ] //	[ ] 	[ ] WriteErrFile(0)	[ ] 	[ ] [ ] [+] BOOLEAN bDirExists			(STRING sDir)	[+] //BOOLEAN bDirExists 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author: 					John Connolly		[ ] // Function Name:			bDirExists		[ ] // Purpose: 				This function will return TRUE if a directory 		[ ] //							exists at location or return FALSE if the 		[ ] //							directory does not exist at location.		[ ] //		[ ] // Inputs:					STRING (location of file)		[ ] // Calling convention:		if ( bDirExists(sDir) ) then ...		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] BOOLEAN bIsThere = SYS_DirExists(sDir)	[ ] 	[+] if (bIsThere)		[ ] return TRUE	[+] else		[ ] return FALSE	[ ] [ ] [+] BOOLEAN bFileExists			(STRING sFile)	[+] //BOOLEAN bFileExists 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author: 					John Connolly		[ ] // Function Name:			bFileExists		[ ] // Purpose: 				This function will return TRUE if a file 		[ ] //							exists at location or return FALSE if the 		[ ] //							file does not exist at location.		[ ] //		[ ] // Inputs:					STRING (location of file)		[ ] // Calling convention:		if ( bFileExists(sFile) ) then ...		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] BOOLEAN bIsThere = SYS_FileExists(sFile)	[ ] 	[+] if (bIsThere)		[ ] return TRUE	[+] else		[ ] return FALSE	[ ] [ ] [+] BOOLEAN	CheckErrFile()	[+] //CheckErrFile		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author: 			John Connolly		[ ] // Function Name:	CheckErrFile		[ ] //		[ ] // Purpose: 		This function will check the flag written in the error		[ ] //					file specified at location 'csFileDir'.  If the flag bit				[ ] //					results file. The string parameter that is passed		[ ] //					is the string written to the results file.		[ ] //		[ ] // Inputs:			HFILE		(error handling data file 'csFileDir')		[ ] //		[ ] // Example:			if CheckErrFile()...		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] 	[+] if (ReadErrFile() == 0)		[ ] 		[ ] // No-op; continue		[ ] return (true)		[ ] 	[+] else		[ ] 		[ ] // Error condition read		[ ] return (false)		[ ] 	[ ] [ ] [+] VOID FatalError				(STRING sStr)	[+] // FatalError Header		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author: 			John Connolly		[ ] // Function Name:	FatalError		[ ] //		[ ] // Purpose: 		This function will raise an error condition and		[ ] //					write an error statement to the results file. The		[ ] //					string parameter that is passed is the string written		[ ] //					to the results file. The error file flag will be modified		[ ] //					by writing a '1'. Upon the next read of this error file, 		[ ] //					based upon the flag, an error has occurred.		[ ] //		[ ] // Inputs:			STRING		[ ] //		[ ] // Example:			FatalError ("A fatal error occurred!")		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // Change the flag in the error file	[ ] WriteErrFile(1)	[ ] 	[ ] LogError ( "*** FATAL ERROR: " + sStr )	[ ] @("$StopRunning")()[ ] [+] VOID Initialize_MachineData	(STRING sLocation)	[+] //VOID Initialize_MachineData 		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author: 					John Connolly		[ ] // Function Name:			InitMachineData		[ ] // Purpose: 				This function will initialize all machine variables		[ ] //							and print them to the QA Partner results file.		[ ] //		[ ] // Inputs:					STRING (location of directory or file)		[ ] // Calling convention:		InitMachineData(sLocation)		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] LIST OF STRING lsMachineName	[ ] STRING sOSName, sVersion	[ ] 	[ ] // Get computer name from DOS, operating system name, and version	[ ] SYS_Execute("echo %COMPUTERNAME%",lsMachineName)	[ ] sOSName = SYS_GetName()	[ ] sVersion = SYS_GetVersion()	[ ] 	[ ] // Print all information about machine	[ ] printf("\n")	[ ] print("Directory: 					'{sLocation}' ")	[ ] print("Machine Name: 				'{lsMachineName[1]}' ")	[ ] print("Operating System:			'{sOSName}' ")	[ ] print("Operating System Version: 	'{sVersion}' ")	[ ] printf("\n")	[ ] [ ] [+] VOID NonFatalError			(STRING sStr)	[+] //NonFatalError		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author: 			John Connolly		[ ] // Function Name:	NonFatalError		[ ] //		[ ] // Purpose: 		This function will write a warning statement to the		[ ] //					results file. The string parameter that is passed		[ ] //					is the string written to the results file.		[ ] //		[ ] // Inputs:			STRING		[ ] //		[ ] // Example:			NonFatalError ("A non fatal error occurred!")		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] LogWarning("*** NON-FATAL ERROR: {sStr}")	[ ] [ ] [+] INTEGER	ReadErrFile()	[+] //ReadErrFile		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author: 			John Connolly		[ ] // Function Name:	ReadErrFile		[ ] //		[ ] // Purpose: 		This function will read the line from the error file.		[ ] //					If the data read from the error file is an integer, this		[ ] //					value will be returned. If the data read is not an integer, 		[ ] //					return a '1' to indicate that an error occurred while		[ ] //					reading the data. (i.e. corrupt data file) 		[ ] //		[ ] // Inputs:			HFILE		(error handling data file 'csFileDir')		[ ] // Outputs:			INTEGER		(return number read from error file)		[ ] // Example:			ReadErrFile()		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] // create a file handle to open a file for read mode	[+] do		[ ] HFILE hOpened = FileOpen(csFileDir, FM_READ)	[+] except		[ ] FatalError("Reading error file at location {csFileDir} ")	[ ] 	[ ] 	[ ] BOOLEAN bResult	[ ] ANYTYPE aValue	[ ] 	[ ] 	[+] do		[ ] bResult = FileReadValue(hOpened, aValue)	[+] except		[ ] FatalError("Failed to read value from data file")	[ ] 	[ ] // Determine the data type of the value read from the file. If the	[ ] // data type is an integer value then the file is not corrupt and	[ ] // return the value. Otherwise, return a zero to indicate that	[ ] // processing does not continue.	[+] if (Typeof(aValue) == INTEGER)		[ ] return (aValue)		[ ] 	[+] else 		[ ] // we cannot continue the file may be corrupted		[ ] return (1)	[ ] [ ] [+] private VOID WriteErrFile	(INTEGER iNum)	[+] //WriteErrFile		[ ] /////////////////////////////////////////////////////////////////////////////		[ ] // Author: 			John Connolly		[ ] // Function Name:	WriteErrFile		[ ] //		[ ] // Purpose: 		This function will write a single INTEGER to the		[ ] //					error file. This functions does not check for the 		[ ] //					validity for a '0' or '1'. This function simply		[ ] //					writes the parameter (TYPE INTEGER) that was passed.		[ ] //		[ ] // Inputs:			INTEGER		(error number)		[ ] // Outputs:			HFILE		(error handling data file 'csFileDir')		[ ] //		[ ] // Example:			WriteErrFile()		[ ] /////////////////////////////////////////////////////////////////////////////	[ ] 	[ ] HFILE hOpened	[ ] STRING sLine, sChar	[ ] 	[ ] 	[ ] // convert the integer variable to a character	[+] do		[ ] sChar = Str(iNum)	[+] except		[ ] FatalError("Parameter passed not converted correctly to STRING")	[ ] 	[ ] // open the error file	[+] do		[ ] hOpened = FileOpen(csFileDir, FM_WRITE)	[+] except		[ ] FatalError("Opening handle to error file")	[ ] 	[ ] 	[ ] FileWriteLine(hOpened, sChar)	[ ] 	[ ] 	[ ] // close the file once finished with file handle	[+] do		[ ] FileClose(hOpened)	[+] except		[ ] FatalError("Closing error file")	[ ] 	[ ] 	[ ] // Check to see that file exists and was created successfully	[+] if ( bFileExists(csFileDir) )		[ ] // do nothing		[ ] 	[+] else		[ ] FatalError("Failure to write file")		[ ] 	[ ] 	[ ] [ ] [ ] 